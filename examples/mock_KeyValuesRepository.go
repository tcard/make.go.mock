// Code generated by github.com/tcard/make.go.mock. DO NOT EDIT.

package examples

import (
	fmt "fmt"
	cmp "github.com/google/go-cmp/cmp"
	runtime "runtime"
)

// KeyValuesRepositoryMocker builds mocks for type KeyValuesRepository.
//
// Its fields match the original type's methods. Set those you expect to be
// called, then call the Mock method to get a mock that implements the original
// type.
//
// If the original type was a function, it is mapped to field Func.
//
// The Describe method is a shortcut to define this struct's fields in a
// declarative manner.
type KeyValuesRepositoryMocker struct {
	Get func(key string) (r0 int, r1 error)
	Put func(key string, value int) (r0 error)
}

// Describe lets you describe how the methods on the resulting mock are expected
// to be called and what they will return.
//
// When you're done describing methods, call Mock to get a mock that implements
// the behavior you described.
func (m *KeyValuesRepositoryMocker) Describe() KeyValuesRepositoryMockDescriptor {
	return KeyValuesRepositoryMockDescriptor{m: m}
}

// A KeyValuesRepositoryMockDescriptor lets you describe how the methods on the resulting mock are expected
// to be called and what they will return.
//
// When you're done describing methods, call its Mock method to get a mock that
// implements the behavior you described.
type KeyValuesRepositoryMockDescriptor struct {
	m *KeyValuesRepositoryMocker
	descriptors_Get []*KeyValuesRepositoryGetMockDescriptor
	descriptors_Put []*KeyValuesRepositoryPutMockDescriptor
}

// Mock returns a mock that the KeyValuesRepository interface, following the behavior
// described by the descriptor methods.
//
// It also returns a function that should be called before the test is done to
// ensure that the expected number of calls to the mock methods happened. You
// can pass a *testing.T to it, since it implements the interface it wants.
func (d KeyValuesRepositoryMockDescriptor) Mock() (m KeyValuesRepositoryMock, assert func(t interface{ Errorf(s string, args ...interface{})  }) (ok bool)) {
	assert = d.done()
	return d.m.Mock(), assert
}

func (d KeyValuesRepositoryMockDescriptor) done() func(t interface{ Errorf(s string, args ...interface{})  }) bool {
	var atAssert []func() (method string, errs []string)
	type specErrs struct {
		fileLine string
		errs []string
	}
	
	if len(d.descriptors_Get) > 0 {
		for _, desc := range d.descriptors_Get {
			desc := desc
			calls := 0
			prev := desc.call
			desc.call = func(key string) (r0 int, r1 error) {
				calls++
				return prev(key)
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "Get", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.Get = func(key string) (r0 int, r1 error) {
			var matching []*KeyValuesRepositoryGetMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_Get {
				errs := desc.argValidator(key)
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				return matching[0].call(key)
			}
			var args string
			for i, arg := range []interface{}{key} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at "+errs.fileLine+":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for KeyValuesRepository.Get with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for KeyValuesRepository.Get with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.Get = func(key string) (r0 int, r1 error) {
			panic("unexpected call to mock for KeyValuesRepository.Get")
		}
	}
	if len(d.descriptors_Put) > 0 {
		for _, desc := range d.descriptors_Put {
			desc := desc
			calls := 0
			prev := desc.call
			desc.call = func(key string, value int) (r0 error) {
				calls++
				return prev(key, value)
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "Put", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.Put = func(key string, value int) (r0 error) {
			var matching []*KeyValuesRepositoryPutMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_Put {
				errs := desc.argValidator(key, value)
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				return matching[0].call(key, value)
			}
			var args string
			for i, arg := range []interface{}{key, value} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at "+errs.fileLine+":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for KeyValuesRepository.Put with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for KeyValuesRepository.Put with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.Put = func(key string, value int) (r0 error) {
			panic("unexpected call to mock for KeyValuesRepository.Put")
		}
	}
	return func(t interface{ Errorf(s string, args ...interface{})  }) bool {
		ok := true
		for _, assert := range atAssert {
			method, errs := assert()
			for _, err := range errs {
				ok = false
				t.Errorf("mock for KeyValuesRepository.%s: %s", method, err)
			}
		}
		return ok
	}
}
	
// Get starts describing a way method KeyValuesRepository.Get is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d KeyValuesRepositoryMockDescriptor) Get() *KeyValuesRepositoryGetMockDescriptor {
	return d.newKeyValuesRepositoryGetMockDescriptor()
}

func (d KeyValuesRepositoryMockDescriptor) newKeyValuesRepositoryGetMockDescriptor() *KeyValuesRepositoryGetMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &KeyValuesRepositoryGetMockDescriptor{
		mockDesc: d,
		times: func(int) error { return nil },
		argValidator: func(got_key string) []string { return nil },
		fileLine: fmt.Sprintf("%s:%d", file, line),
	}
}

// KeyValuesRepositoryGetMockDescriptor is returned by KeyValuesRepositoryMockDescriptor.Get and
// holds methods to describe the mock for method KeyValuesRepository.Get.
type KeyValuesRepositoryGetMockDescriptor struct {
	mockDesc KeyValuesRepositoryMockDescriptor
	times func(int) error
	argValidator func(got_key string) []string
	call func(key string) (r0 int, r1 error)
	fileLine string
}
	
// Takes lets you specify a value with which the actual value passed to
// the mocked method KeyValuesRepository.Get as parameter #1
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use TakesAny.
//
// If you want more complex validation logic, use TakesMatching.
func (d *KeyValuesRepositoryGetMockDescriptor) Takes(key string, opts ...cmp.Option) KeyValuesRepositoryGetMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_key string) []string {
		errMsgs := prev(got_key)
		if diff := cmp.Diff(key, got_key, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #1 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return KeyValuesRepositoryGetMockDescriptorWith1Arg{d}
}

// TakesAny declares that any value passed to the mocked method
// Get as parameter #1 is expected.
func (d *KeyValuesRepositoryGetMockDescriptor) TakesAny() KeyValuesRepositoryGetMockDescriptorWith1Arg {
	return KeyValuesRepositoryGetMockDescriptorWith1Arg{d}
}

// TakesMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method KeyValuesRepository.Get as parameter #1.
func (d *KeyValuesRepositoryGetMockDescriptor) TakesMatching(match func(key string) error) KeyValuesRepositoryGetMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_key string) []string {
		errMsgs := prev(got_key)
		if err := match(got_key); err != nil {
			errMsgs = append(errMsgs, "parameter \"key\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return KeyValuesRepositoryGetMockDescriptorWith1Arg{d}
}

// KeyValuesRepositoryGetMockDescriptorWith1Arg is a step forward in the description of a way that the
// method KeyValuesRepository.Get is expected to be called, with 1
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type KeyValuesRepositoryGetMockDescriptorWith1Arg struct {
	methodDesc *KeyValuesRepositoryGetMockDescriptor
}
	
// Returns lets you specify the values that the mocked method KeyValuesRepository.Get,
// if called with values matching the expectations, will return.
func (d KeyValuesRepositoryGetMockDescriptorWith1Arg) Returns(r0 int, r1 error) KeyValuesRepositoryGetMockDescriptorWithReturn {
	return d.ReturnsFrom(func(string) (int, error) {
		return r0, r1
	})
}

// Returns lets you specify the values that the mocked method KeyValuesRepository.Get,
// if called with values matching the expectations, will return.
// 
// It passes such passed values to a function that then returns the return values. 
func (d KeyValuesRepositoryGetMockDescriptorWith1Arg) ReturnsFrom(f func(key string) (r0 int, r1 error)) KeyValuesRepositoryGetMockDescriptorWithReturn {
	d.methodDesc.call = f
	return KeyValuesRepositoryGetMockDescriptorWithReturn{d.methodDesc}
}

// KeyValuesRepositoryGetMockDescriptorWithReturn is a step forward in the description of a way that
// method KeyValuesRepository.Get is to behave when called, with all expected parameters
// and the resulting values specified.
// arguments specified.
// 
// It has methods to describe the times the method is expected to be called,
// or you can start another method call description, or you can call Mock to
// end the description and get the resulting mock.
type KeyValuesRepositoryGetMockDescriptorWithReturn struct {
	methodDesc *KeyValuesRepositoryGetMockDescriptor
}
	
// Times lets you specify a exact number of times this method is expected to be
// called.
func (d KeyValuesRepositoryGetMockDescriptorWithReturn) Times(times int) KeyValuesRepositoryMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d KeyValuesRepositoryGetMockDescriptorWithReturn) AtLeastTimes(times int) KeyValuesRepositoryMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d KeyValuesRepositoryGetMockDescriptorWithReturn) TimesMatching(f func(times int) error) KeyValuesRepositoryMockDescriptor {
	d.methodDesc.times = f
	d.methodDesc.done()
	return d.methodDesc.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See KeyValuesRepositoryMockDescriptor.Mock for details.
func (d KeyValuesRepositoryGetMockDescriptorWithReturn) Mock() (m KeyValuesRepositoryMock, assert func(t interface{ Errorf(string, ...interface{})  }) (ok bool)) {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.Mock()
}
	
// Get finishes the current description for method KeyValuesRepository.Get and
// starts describing for method Get.
//
// See KeyValuesRepositoryMockDescriptor.Get for details.
func (d KeyValuesRepositoryGetMockDescriptorWithReturn) Get() *KeyValuesRepositoryGetMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newKeyValuesRepositoryGetMockDescriptor()
}
	
// Put finishes the current description for method KeyValuesRepository.Get and
// starts describing for method Put.
//
// See KeyValuesRepositoryMockDescriptor.Put for details.
func (d KeyValuesRepositoryGetMockDescriptorWithReturn) Put() *KeyValuesRepositoryPutMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newKeyValuesRepositoryPutMockDescriptor()
}
	
func (d *KeyValuesRepositoryGetMockDescriptor) done() {
	d.mockDesc.descriptors_Get = append(d.mockDesc.descriptors_Get, d)
}
	
// Put starts describing a way method KeyValuesRepository.Put is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d KeyValuesRepositoryMockDescriptor) Put() *KeyValuesRepositoryPutMockDescriptor {
	return d.newKeyValuesRepositoryPutMockDescriptor()
}

func (d KeyValuesRepositoryMockDescriptor) newKeyValuesRepositoryPutMockDescriptor() *KeyValuesRepositoryPutMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &KeyValuesRepositoryPutMockDescriptor{
		mockDesc: d,
		times: func(int) error { return nil },
		argValidator: func(got_key string, got_value int) []string { return nil },
		fileLine: fmt.Sprintf("%s:%d", file, line),
	}
}

// KeyValuesRepositoryPutMockDescriptor is returned by KeyValuesRepositoryMockDescriptor.Put and
// holds methods to describe the mock for method KeyValuesRepository.Put.
type KeyValuesRepositoryPutMockDescriptor struct {
	mockDesc KeyValuesRepositoryMockDescriptor
	times func(int) error
	argValidator func(got_key string, got_value int) []string
	call func(key string, value int) (r0 error)
	fileLine string
}
	
// Takes lets you specify a value with which the actual value passed to
// the mocked method KeyValuesRepository.Put as parameter #1
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use TakesAny.
//
// If you want more complex validation logic, use TakesMatching.
func (d *KeyValuesRepositoryPutMockDescriptor) Takes(key string, opts ...cmp.Option) KeyValuesRepositoryPutMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_key string, got_value int) []string {
		errMsgs := prev(got_key, got_value)
		if diff := cmp.Diff(key, got_key, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #1 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return KeyValuesRepositoryPutMockDescriptorWith1Arg{d}
}

// TakesAny declares that any value passed to the mocked method
// Put as parameter #1 is expected.
func (d *KeyValuesRepositoryPutMockDescriptor) TakesAny() KeyValuesRepositoryPutMockDescriptorWith1Arg {
	return KeyValuesRepositoryPutMockDescriptorWith1Arg{d}
}

// TakesMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method KeyValuesRepository.Put as parameter #1.
func (d *KeyValuesRepositoryPutMockDescriptor) TakesMatching(match func(key string) error) KeyValuesRepositoryPutMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_key string, got_value int) []string {
		errMsgs := prev(got_key, got_value)
		if err := match(got_key); err != nil {
			errMsgs = append(errMsgs, "parameter \"key\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return KeyValuesRepositoryPutMockDescriptorWith1Arg{d}
}

// KeyValuesRepositoryPutMockDescriptorWith1Arg is a step forward in the description of a way that the
// method KeyValuesRepository.Put is expected to be called, with 1
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type KeyValuesRepositoryPutMockDescriptorWith1Arg struct {
	methodDesc *KeyValuesRepositoryPutMockDescriptor
}
	
// And lets you specify a value with which the actual value passed to
// the mocked method KeyValuesRepository.Put as parameter #2
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use AndAny.
//
// If you want more complex validation logic, use AndMatching.
func (d KeyValuesRepositoryPutMockDescriptorWith1Arg) And(value int, opts ...cmp.Option) KeyValuesRepositoryPutMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_key string, got_value int) []string {
		errMsgs := prev(got_key, got_value)
		if diff := cmp.Diff(value, got_value, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #2 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return KeyValuesRepositoryPutMockDescriptorWith2Args{d.methodDesc}
}

// AndAny declares that any value passed to the mocked method
// Put as parameter #2 is expected.
func (d KeyValuesRepositoryPutMockDescriptorWith1Arg) AndAny() KeyValuesRepositoryPutMockDescriptorWith2Args {
	return KeyValuesRepositoryPutMockDescriptorWith2Args{d.methodDesc}
}

// AndMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method KeyValuesRepository.Put as parameter #2.
func (d KeyValuesRepositoryPutMockDescriptorWith1Arg) AndMatching(match func(value int) error) KeyValuesRepositoryPutMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_key string, got_value int) []string {
		errMsgs := prev(got_key, got_value)
		if err := match(got_value); err != nil {
			errMsgs = append(errMsgs, "parameter \"value\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return KeyValuesRepositoryPutMockDescriptorWith2Args{d.methodDesc}
}

// KeyValuesRepositoryPutMockDescriptorWith2Args is a step forward in the description of a way that the
// method KeyValuesRepository.Put is expected to be called, with 2
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type KeyValuesRepositoryPutMockDescriptorWith2Args struct {
	methodDesc *KeyValuesRepositoryPutMockDescriptor
}
	
// Returns lets you specify the values that the mocked method KeyValuesRepository.Put,
// if called with values matching the expectations, will return.
func (d KeyValuesRepositoryPutMockDescriptorWith2Args) Returns(r0 error) KeyValuesRepositoryPutMockDescriptorWithReturn {
	return d.ReturnsFrom(func(string, int) error {
		return r0
	})
}

// Returns lets you specify the values that the mocked method KeyValuesRepository.Put,
// if called with values matching the expectations, will return.
// 
// It passes such passed values to a function that then returns the return values. 
func (d KeyValuesRepositoryPutMockDescriptorWith2Args) ReturnsFrom(f func(key string, value int) (r0 error)) KeyValuesRepositoryPutMockDescriptorWithReturn {
	d.methodDesc.call = f
	return KeyValuesRepositoryPutMockDescriptorWithReturn{d.methodDesc}
}

// KeyValuesRepositoryPutMockDescriptorWithReturn is a step forward in the description of a way that
// method KeyValuesRepository.Put is to behave when called, with all expected parameters
// and the resulting values specified.
// arguments specified.
// 
// It has methods to describe the times the method is expected to be called,
// or you can start another method call description, or you can call Mock to
// end the description and get the resulting mock.
type KeyValuesRepositoryPutMockDescriptorWithReturn struct {
	methodDesc *KeyValuesRepositoryPutMockDescriptor
}
	
// Times lets you specify a exact number of times this method is expected to be
// called.
func (d KeyValuesRepositoryPutMockDescriptorWithReturn) Times(times int) KeyValuesRepositoryMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d KeyValuesRepositoryPutMockDescriptorWithReturn) AtLeastTimes(times int) KeyValuesRepositoryMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d KeyValuesRepositoryPutMockDescriptorWithReturn) TimesMatching(f func(times int) error) KeyValuesRepositoryMockDescriptor {
	d.methodDesc.times = f
	d.methodDesc.done()
	return d.methodDesc.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See KeyValuesRepositoryMockDescriptor.Mock for details.
func (d KeyValuesRepositoryPutMockDescriptorWithReturn) Mock() (m KeyValuesRepositoryMock, assert func(t interface{ Errorf(string, ...interface{})  }) (ok bool)) {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.Mock()
}
	
// Get finishes the current description for method KeyValuesRepository.Put and
// starts describing for method Get.
//
// See KeyValuesRepositoryMockDescriptor.Get for details.
func (d KeyValuesRepositoryPutMockDescriptorWithReturn) Get() *KeyValuesRepositoryGetMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newKeyValuesRepositoryGetMockDescriptor()
}
	
// Put finishes the current description for method KeyValuesRepository.Put and
// starts describing for method Put.
//
// See KeyValuesRepositoryMockDescriptor.Put for details.
func (d KeyValuesRepositoryPutMockDescriptorWithReturn) Put() *KeyValuesRepositoryPutMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newKeyValuesRepositoryPutMockDescriptor()
}
	
func (d *KeyValuesRepositoryPutMockDescriptor) done() {
	d.mockDesc.descriptors_Put = append(d.mockDesc.descriptors_Put, d)
}
	
// Mock returns a mock for KeyValuesRepository that calls the functions
// defined as struct fields in the receiver.
//
// You probably want to use Describe instead.
func (m *KeyValuesRepositoryMocker) Mock() KeyValuesRepositoryMock {
	return _makegomock_KeyValuesRepositoryMockFromMocker{m}
}

type _makegomock_KeyValuesRepositoryMockFromMocker struct {
	m *KeyValuesRepositoryMocker
}

func (m _makegomock_KeyValuesRepositoryMockFromMocker) Get(key string) (r0 int, r1 error) {
	return m.m.Get(key)
}

func (m _makegomock_KeyValuesRepositoryMockFromMocker) Put(key string, value int) (r0 error) {
	return m.m.Put(key, value)
}

// KeyValuesRepositoryMock is a mock with the same underlying type as KeyValuesRepository.
//
// It is copied from the original just to avoid introducing a dependency on
// KeyValuesRepository's package.
type KeyValuesRepositoryMock interface {
	Get(key string) (r0 int, r1 error)
	Put(key string, value int) (r0 error)
}
