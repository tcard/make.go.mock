// Code generated by github.com/tcard/make.go.mock. DO NOT EDIT.

package generated

import (
	fmt "fmt"
	cmp "github.com/google/go-cmp/cmp"
	examples "github.com/tcard/make.go.mock/examples"
	os "os"
	runtime "runtime"
)

// MyInterfaceMocker builds mocks for type MyInterface.
//
// Its fields match the original type's methods. Set those you expect to be
// called, then call the Mock method to get a mock that implements the original
// type.
//
// If the original type was a function, it is mapped to field Func.
//
// The Describe method is a shortcut to define this struct's fields in a
// declarative manner.
type MyInterfaceMocker struct {
	Boring                 func()
	EmbeddedMethod         func()
	ReturnSomethingAtLeast func() (r0 int)
	ShouldBeFun            func(a0 int, a1 map[string]map[examples.MyStruct]bool, a2 ...chan<- <-chan struct{}) (r0 int, r1 error)
	StdSomething           func(f *os.File, ints ...int) (named bool)
}

// Describe lets you describe how the methods on the resulting mock are expected
// to be called and what they will return.
//
// When you're done describing methods, call Mock to get a mock that implements
// the behavior you described.
func (m *MyInterfaceMocker) Describe() MyInterfaceMockDescriptor {
	return MyInterfaceMockDescriptor{m: m}
}

// A MyInterfaceMockDescriptor lets you describe how the methods on the resulting mock are expected
// to be called and what they will return.
//
// When you're done describing methods, call its Mock method to get a mock that
// implements the behavior you described.
type MyInterfaceMockDescriptor struct {
	m *MyInterfaceMocker
	descriptors_Boring []*MyInterfaceBoringMockDescriptor
	descriptors_EmbeddedMethod []*MyInterfaceEmbeddedMethodMockDescriptor
	descriptors_ReturnSomethingAtLeast []*MyInterfaceReturnSomethingAtLeastMockDescriptor
	descriptors_ShouldBeFun []*MyInterfaceShouldBeFunMockDescriptor
	descriptors_StdSomething []*MyInterfaceStdSomethingMockDescriptor
}

// Mock returns a mock that the MyInterface interface, following the behavior
// described by the descriptor methods.
//
// It also returns a function that should be called before the test is done to
// ensure that the expected number of calls to the mock methods happened. You
// can pass a *testing.T to it, since it implements the interface it wants.
func (d MyInterfaceMockDescriptor) Mock() (m MyInterfaceMock, assert func(t interface{ Errorf(s string, args ...interface{})  }) (ok bool)) {
	assert = d.done()
	return d.m.Mock(), assert
}

func (d MyInterfaceMockDescriptor) done() func(t interface{ Errorf(s string, args ...interface{})  }) bool {
	var atAssert []func() (method string, errs []string)
	type specErrs struct {
		fileLine string
		errs []string
	}
	
	if len(d.descriptors_Boring) > 0 {
		for _, desc := range d.descriptors_Boring {
			desc := desc
			calls := 0
			desc.call = func() {
				calls++
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "Boring", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.Boring = func() {
			var matching []*MyInterfaceBoringMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_Boring {
				errs := desc.argValidator()
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				matching[0].call()
				return
			}
			var args string
			for i, arg := range []interface{}{} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at "+errs.fileLine+":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for MyInterface.Boring with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for MyInterface.Boring with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.Boring = func() {
			panic("unexpected call to mock for MyInterface.Boring")
		}
	}
	if len(d.descriptors_EmbeddedMethod) > 0 {
		for _, desc := range d.descriptors_EmbeddedMethod {
			desc := desc
			calls := 0
			desc.call = func() {
				calls++
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "EmbeddedMethod", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.EmbeddedMethod = func() {
			var matching []*MyInterfaceEmbeddedMethodMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_EmbeddedMethod {
				errs := desc.argValidator()
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				matching[0].call()
				return
			}
			var args string
			for i, arg := range []interface{}{} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at "+errs.fileLine+":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for MyInterface.EmbeddedMethod with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for MyInterface.EmbeddedMethod with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.EmbeddedMethod = func() {
			panic("unexpected call to mock for MyInterface.EmbeddedMethod")
		}
	}
	if len(d.descriptors_ReturnSomethingAtLeast) > 0 {
		for _, desc := range d.descriptors_ReturnSomethingAtLeast {
			desc := desc
			calls := 0
			prev := desc.call
			desc.call = func() (r0 int) {
				calls++
				return prev()
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "ReturnSomethingAtLeast", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.ReturnSomethingAtLeast = func() (r0 int) {
			var matching []*MyInterfaceReturnSomethingAtLeastMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_ReturnSomethingAtLeast {
				errs := desc.argValidator()
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				return matching[0].call()
			}
			var args string
			for i, arg := range []interface{}{} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at "+errs.fileLine+":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for MyInterface.ReturnSomethingAtLeast with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for MyInterface.ReturnSomethingAtLeast with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.ReturnSomethingAtLeast = func() (r0 int) {
			panic("unexpected call to mock for MyInterface.ReturnSomethingAtLeast")
		}
	}
	if len(d.descriptors_ShouldBeFun) > 0 {
		for _, desc := range d.descriptors_ShouldBeFun {
			desc := desc
			calls := 0
			prev := desc.call
			desc.call = func(a0 int, a1 map[string]map[examples.MyStruct]bool, a2 []chan<- <-chan struct{}) (r0 int, r1 error) {
				calls++
				return prev(a0, a1, a2)
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "ShouldBeFun", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.ShouldBeFun = func(a0 int, a1 map[string]map[examples.MyStruct]bool, a2 ...chan<- <-chan struct{}) (r0 int, r1 error) {
			var matching []*MyInterfaceShouldBeFunMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_ShouldBeFun {
				errs := desc.argValidator(a0, a1, a2)
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				return matching[0].call(a0, a1, a2)
			}
			var args string
			for i, arg := range []interface{}{a0, a1, a2} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at "+errs.fileLine+":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for MyInterface.ShouldBeFun with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for MyInterface.ShouldBeFun with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.ShouldBeFun = func(a0 int, a1 map[string]map[examples.MyStruct]bool, a2 ...chan<- <-chan struct{}) (r0 int, r1 error) {
			panic("unexpected call to mock for MyInterface.ShouldBeFun")
		}
	}
	if len(d.descriptors_StdSomething) > 0 {
		for _, desc := range d.descriptors_StdSomething {
			desc := desc
			calls := 0
			prev := desc.call
			desc.call = func(f *os.File, ints []int) (named bool) {
				calls++
				return prev(f, ints)
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "StdSomething", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.StdSomething = func(f *os.File, ints ...int) (named bool) {
			var matching []*MyInterfaceStdSomethingMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_StdSomething {
				errs := desc.argValidator(f, ints)
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				return matching[0].call(f, ints)
			}
			var args string
			for i, arg := range []interface{}{f, ints} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at "+errs.fileLine+":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for MyInterface.StdSomething with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for MyInterface.StdSomething with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.StdSomething = func(f *os.File, ints ...int) (named bool) {
			panic("unexpected call to mock for MyInterface.StdSomething")
		}
	}
	return func(t interface{ Errorf(s string, args ...interface{})  }) bool {
		ok := true
		for _, assert := range atAssert {
			method, errs := assert()
			for _, err := range errs {
				ok = false
				t.Errorf("mock for MyInterface.%s: %s", method, err)
			}
		}
		return ok
	}
}
	
// Boring starts describing a way method MyInterface.Boring is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d MyInterfaceMockDescriptor) Boring() *MyInterfaceBoringMockDescriptor {
	return d.newMyInterfaceBoringMockDescriptor()
}

func (d MyInterfaceMockDescriptor) newMyInterfaceBoringMockDescriptor() *MyInterfaceBoringMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &MyInterfaceBoringMockDescriptor{
		mockDesc: d,
		times: func(int) error { return nil },
		argValidator: func() []string { return nil },
		fileLine: fmt.Sprintf("%s:%d", file, line),
	}
}

// MyInterfaceBoringMockDescriptor is returned by MyInterfaceMockDescriptor.Boring and
// holds methods to describe the mock for method MyInterface.Boring.
type MyInterfaceBoringMockDescriptor struct {
	mockDesc MyInterfaceMockDescriptor
	times func(int) error
	argValidator func() []string
	call func()
	fileLine string
}
	
// Times lets you specify a exact number of times this method is expected to be
// called.
func (d *MyInterfaceBoringMockDescriptor) Times(times int) MyInterfaceMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d *MyInterfaceBoringMockDescriptor) AtLeastTimes(times int) MyInterfaceMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d *MyInterfaceBoringMockDescriptor) TimesMatching(f func(times int) error) MyInterfaceMockDescriptor {
	d.times = f
	d.done()
	return d.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See MyInterfaceMockDescriptor.Mock for details.
func (d *MyInterfaceBoringMockDescriptor) Mock() (m MyInterfaceMock, assert func(t interface{ Errorf(string, ...interface{})  }) (ok bool)) {
	d.done()
	return d.mockDesc.Mock()
}
	
// Boring finishes the current description for method MyInterface.Boring and
// starts describing for method Boring.
//
// See MyInterfaceMockDescriptor.Boring for details.
func (d *MyInterfaceBoringMockDescriptor) Boring() *MyInterfaceBoringMockDescriptor {
	d.done()
	return d.mockDesc.newMyInterfaceBoringMockDescriptor()
}
	
// EmbeddedMethod finishes the current description for method MyInterface.Boring and
// starts describing for method EmbeddedMethod.
//
// See MyInterfaceMockDescriptor.EmbeddedMethod for details.
func (d *MyInterfaceBoringMockDescriptor) EmbeddedMethod() *MyInterfaceEmbeddedMethodMockDescriptor {
	d.done()
	return d.mockDesc.newMyInterfaceEmbeddedMethodMockDescriptor()
}
	
// ReturnSomethingAtLeast finishes the current description for method MyInterface.Boring and
// starts describing for method ReturnSomethingAtLeast.
//
// See MyInterfaceMockDescriptor.ReturnSomethingAtLeast for details.
func (d *MyInterfaceBoringMockDescriptor) ReturnSomethingAtLeast() *MyInterfaceReturnSomethingAtLeastMockDescriptor {
	d.done()
	return d.mockDesc.newMyInterfaceReturnSomethingAtLeastMockDescriptor()
}
	
// ShouldBeFun finishes the current description for method MyInterface.Boring and
// starts describing for method ShouldBeFun.
//
// See MyInterfaceMockDescriptor.ShouldBeFun for details.
func (d *MyInterfaceBoringMockDescriptor) ShouldBeFun() *MyInterfaceShouldBeFunMockDescriptor {
	d.done()
	return d.mockDesc.newMyInterfaceShouldBeFunMockDescriptor()
}
	
// StdSomething finishes the current description for method MyInterface.Boring and
// starts describing for method StdSomething.
//
// See MyInterfaceMockDescriptor.StdSomething for details.
func (d *MyInterfaceBoringMockDescriptor) StdSomething() *MyInterfaceStdSomethingMockDescriptor {
	d.done()
	return d.mockDesc.newMyInterfaceStdSomethingMockDescriptor()
}
	
func (d *MyInterfaceBoringMockDescriptor) done() {
	d.mockDesc.descriptors_Boring = append(d.mockDesc.descriptors_Boring, d)
}
	
// EmbeddedMethod starts describing a way method MyInterface.EmbeddedMethod is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d MyInterfaceMockDescriptor) EmbeddedMethod() *MyInterfaceEmbeddedMethodMockDescriptor {
	return d.newMyInterfaceEmbeddedMethodMockDescriptor()
}

func (d MyInterfaceMockDescriptor) newMyInterfaceEmbeddedMethodMockDescriptor() *MyInterfaceEmbeddedMethodMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &MyInterfaceEmbeddedMethodMockDescriptor{
		mockDesc: d,
		times: func(int) error { return nil },
		argValidator: func() []string { return nil },
		fileLine: fmt.Sprintf("%s:%d", file, line),
	}
}

// MyInterfaceEmbeddedMethodMockDescriptor is returned by MyInterfaceMockDescriptor.EmbeddedMethod and
// holds methods to describe the mock for method MyInterface.EmbeddedMethod.
type MyInterfaceEmbeddedMethodMockDescriptor struct {
	mockDesc MyInterfaceMockDescriptor
	times func(int) error
	argValidator func() []string
	call func()
	fileLine string
}
	
// Times lets you specify a exact number of times this method is expected to be
// called.
func (d *MyInterfaceEmbeddedMethodMockDescriptor) Times(times int) MyInterfaceMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d *MyInterfaceEmbeddedMethodMockDescriptor) AtLeastTimes(times int) MyInterfaceMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d *MyInterfaceEmbeddedMethodMockDescriptor) TimesMatching(f func(times int) error) MyInterfaceMockDescriptor {
	d.times = f
	d.done()
	return d.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See MyInterfaceMockDescriptor.Mock for details.
func (d *MyInterfaceEmbeddedMethodMockDescriptor) Mock() (m MyInterfaceMock, assert func(t interface{ Errorf(string, ...interface{})  }) (ok bool)) {
	d.done()
	return d.mockDesc.Mock()
}
	
// Boring finishes the current description for method MyInterface.EmbeddedMethod and
// starts describing for method Boring.
//
// See MyInterfaceMockDescriptor.Boring for details.
func (d *MyInterfaceEmbeddedMethodMockDescriptor) Boring() *MyInterfaceBoringMockDescriptor {
	d.done()
	return d.mockDesc.newMyInterfaceBoringMockDescriptor()
}
	
// EmbeddedMethod finishes the current description for method MyInterface.EmbeddedMethod and
// starts describing for method EmbeddedMethod.
//
// See MyInterfaceMockDescriptor.EmbeddedMethod for details.
func (d *MyInterfaceEmbeddedMethodMockDescriptor) EmbeddedMethod() *MyInterfaceEmbeddedMethodMockDescriptor {
	d.done()
	return d.mockDesc.newMyInterfaceEmbeddedMethodMockDescriptor()
}
	
// ReturnSomethingAtLeast finishes the current description for method MyInterface.EmbeddedMethod and
// starts describing for method ReturnSomethingAtLeast.
//
// See MyInterfaceMockDescriptor.ReturnSomethingAtLeast for details.
func (d *MyInterfaceEmbeddedMethodMockDescriptor) ReturnSomethingAtLeast() *MyInterfaceReturnSomethingAtLeastMockDescriptor {
	d.done()
	return d.mockDesc.newMyInterfaceReturnSomethingAtLeastMockDescriptor()
}
	
// ShouldBeFun finishes the current description for method MyInterface.EmbeddedMethod and
// starts describing for method ShouldBeFun.
//
// See MyInterfaceMockDescriptor.ShouldBeFun for details.
func (d *MyInterfaceEmbeddedMethodMockDescriptor) ShouldBeFun() *MyInterfaceShouldBeFunMockDescriptor {
	d.done()
	return d.mockDesc.newMyInterfaceShouldBeFunMockDescriptor()
}
	
// StdSomething finishes the current description for method MyInterface.EmbeddedMethod and
// starts describing for method StdSomething.
//
// See MyInterfaceMockDescriptor.StdSomething for details.
func (d *MyInterfaceEmbeddedMethodMockDescriptor) StdSomething() *MyInterfaceStdSomethingMockDescriptor {
	d.done()
	return d.mockDesc.newMyInterfaceStdSomethingMockDescriptor()
}
	
func (d *MyInterfaceEmbeddedMethodMockDescriptor) done() {
	d.mockDesc.descriptors_EmbeddedMethod = append(d.mockDesc.descriptors_EmbeddedMethod, d)
}
	
// ReturnSomethingAtLeast starts describing a way method MyInterface.ReturnSomethingAtLeast is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d MyInterfaceMockDescriptor) ReturnSomethingAtLeast() *MyInterfaceReturnSomethingAtLeastMockDescriptor {
	return d.newMyInterfaceReturnSomethingAtLeastMockDescriptor()
}

func (d MyInterfaceMockDescriptor) newMyInterfaceReturnSomethingAtLeastMockDescriptor() *MyInterfaceReturnSomethingAtLeastMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &MyInterfaceReturnSomethingAtLeastMockDescriptor{
		mockDesc: d,
		times: func(int) error { return nil },
		argValidator: func() []string { return nil },
		fileLine: fmt.Sprintf("%s:%d", file, line),
	}
}

// MyInterfaceReturnSomethingAtLeastMockDescriptor is returned by MyInterfaceMockDescriptor.ReturnSomethingAtLeast and
// holds methods to describe the mock for method MyInterface.ReturnSomethingAtLeast.
type MyInterfaceReturnSomethingAtLeastMockDescriptor struct {
	mockDesc MyInterfaceMockDescriptor
	times func(int) error
	argValidator func() []string
	call func() (r0 int)
	fileLine string
}
	
// Returns lets you specify the values that the mocked method MyInterface.ReturnSomethingAtLeast,
// if called with values matching the expectations, will return.
func (d *MyInterfaceReturnSomethingAtLeastMockDescriptor) Returns(r0 int) MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn {
	return d.ReturnsFrom(func() int {
		return r0
	})
}

// Returns lets you specify the values that the mocked method MyInterface.ReturnSomethingAtLeast,
// if called with values matching the expectations, will return.
// 
// It passes such passed values to a function that then returns the return values. 
func (d *MyInterfaceReturnSomethingAtLeastMockDescriptor) ReturnsFrom(f func() (r0 int)) MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn {
	d.call = f
	return MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn{d}
}

// MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn is a step forward in the description of a way that
// method MyInterface.ReturnSomethingAtLeast is to behave when called, with all expected parameters
// and the resulting values specified.
// arguments specified.
// 
// It has methods to describe the times the method is expected to be called,
// or you can start another method call description, or you can call Mock to
// end the description and get the resulting mock.
type MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn struct {
	methodDesc *MyInterfaceReturnSomethingAtLeastMockDescriptor
}
	
// Times lets you specify a exact number of times this method is expected to be
// called.
func (d MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn) Times(times int) MyInterfaceMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn) AtLeastTimes(times int) MyInterfaceMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn) TimesMatching(f func(times int) error) MyInterfaceMockDescriptor {
	d.methodDesc.times = f
	d.methodDesc.done()
	return d.methodDesc.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See MyInterfaceMockDescriptor.Mock for details.
func (d MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn) Mock() (m MyInterfaceMock, assert func(t interface{ Errorf(string, ...interface{})  }) (ok bool)) {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.Mock()
}
	
// Boring finishes the current description for method MyInterface.ReturnSomethingAtLeast and
// starts describing for method Boring.
//
// See MyInterfaceMockDescriptor.Boring for details.
func (d MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn) Boring() *MyInterfaceBoringMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceBoringMockDescriptor()
}
	
// EmbeddedMethod finishes the current description for method MyInterface.ReturnSomethingAtLeast and
// starts describing for method EmbeddedMethod.
//
// See MyInterfaceMockDescriptor.EmbeddedMethod for details.
func (d MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn) EmbeddedMethod() *MyInterfaceEmbeddedMethodMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceEmbeddedMethodMockDescriptor()
}
	
// ReturnSomethingAtLeast finishes the current description for method MyInterface.ReturnSomethingAtLeast and
// starts describing for method ReturnSomethingAtLeast.
//
// See MyInterfaceMockDescriptor.ReturnSomethingAtLeast for details.
func (d MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn) ReturnSomethingAtLeast() *MyInterfaceReturnSomethingAtLeastMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceReturnSomethingAtLeastMockDescriptor()
}
	
// ShouldBeFun finishes the current description for method MyInterface.ReturnSomethingAtLeast and
// starts describing for method ShouldBeFun.
//
// See MyInterfaceMockDescriptor.ShouldBeFun for details.
func (d MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn) ShouldBeFun() *MyInterfaceShouldBeFunMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceShouldBeFunMockDescriptor()
}
	
// StdSomething finishes the current description for method MyInterface.ReturnSomethingAtLeast and
// starts describing for method StdSomething.
//
// See MyInterfaceMockDescriptor.StdSomething for details.
func (d MyInterfaceReturnSomethingAtLeastMockDescriptorWithReturn) StdSomething() *MyInterfaceStdSomethingMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceStdSomethingMockDescriptor()
}
	
func (d *MyInterfaceReturnSomethingAtLeastMockDescriptor) done() {
	d.mockDesc.descriptors_ReturnSomethingAtLeast = append(d.mockDesc.descriptors_ReturnSomethingAtLeast, d)
}
	
// ShouldBeFun starts describing a way method MyInterface.ShouldBeFun is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d MyInterfaceMockDescriptor) ShouldBeFun() *MyInterfaceShouldBeFunMockDescriptor {
	return d.newMyInterfaceShouldBeFunMockDescriptor()
}

func (d MyInterfaceMockDescriptor) newMyInterfaceShouldBeFunMockDescriptor() *MyInterfaceShouldBeFunMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &MyInterfaceShouldBeFunMockDescriptor{
		mockDesc: d,
		times: func(int) error { return nil },
		argValidator: func(got_a0 int, got_a1 map[string]map[examples.MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string { return nil },
		fileLine: fmt.Sprintf("%s:%d", file, line),
	}
}

// MyInterfaceShouldBeFunMockDescriptor is returned by MyInterfaceMockDescriptor.ShouldBeFun and
// holds methods to describe the mock for method MyInterface.ShouldBeFun.
type MyInterfaceShouldBeFunMockDescriptor struct {
	mockDesc MyInterfaceMockDescriptor
	times func(int) error
	argValidator func(got_a0 int, got_a1 map[string]map[examples.MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string
	call func(a0 int, a1 map[string]map[examples.MyStruct]bool, a2 []chan<- <-chan struct{}) (r0 int, r1 error)
	fileLine string
}
	
// Takes lets you specify a value with which the actual value passed to
// the mocked method MyInterface.ShouldBeFun as parameter #1
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use TakesAny.
//
// If you want more complex validation logic, use TakesMatching.
func (d *MyInterfaceShouldBeFunMockDescriptor) Takes(a0 int, opts ...cmp.Option) MyInterfaceShouldBeFunMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_a0 int, got_a1 map[string]map[examples.MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string {
		errMsgs := prev(got_a0, got_a1, got_a2)
		if diff := cmp.Diff(a0, got_a0, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #1 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return MyInterfaceShouldBeFunMockDescriptorWith1Arg{d}
}

// TakesAny declares that any value passed to the mocked method
// ShouldBeFun as parameter #1 is expected.
func (d *MyInterfaceShouldBeFunMockDescriptor) TakesAny() MyInterfaceShouldBeFunMockDescriptorWith1Arg {
	return MyInterfaceShouldBeFunMockDescriptorWith1Arg{d}
}

// TakesMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method MyInterface.ShouldBeFun as parameter #1.
func (d *MyInterfaceShouldBeFunMockDescriptor) TakesMatching(match func(a0 int) error) MyInterfaceShouldBeFunMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_a0 int, got_a1 map[string]map[examples.MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string {
		errMsgs := prev(got_a0, got_a1, got_a2)
		if err := match(got_a0); err != nil {
			errMsgs = append(errMsgs, "parameter \"a0\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return MyInterfaceShouldBeFunMockDescriptorWith1Arg{d}
}

// MyInterfaceShouldBeFunMockDescriptorWith1Arg is a step forward in the description of a way that the
// method MyInterface.ShouldBeFun is expected to be called, with 1
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type MyInterfaceShouldBeFunMockDescriptorWith1Arg struct {
	methodDesc *MyInterfaceShouldBeFunMockDescriptor
}
	
// And lets you specify a value with which the actual value passed to
// the mocked method MyInterface.ShouldBeFun as parameter #2
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use AndAny.
//
// If you want more complex validation logic, use AndMatching.
func (d MyInterfaceShouldBeFunMockDescriptorWith1Arg) And(a1 map[string]map[examples.MyStruct]bool, opts ...cmp.Option) MyInterfaceShouldBeFunMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a0 int, got_a1 map[string]map[examples.MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string {
		errMsgs := prev(got_a0, got_a1, got_a2)
		if diff := cmp.Diff(a1, got_a1, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #2 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return MyInterfaceShouldBeFunMockDescriptorWith2Args{d.methodDesc}
}

// AndAny declares that any value passed to the mocked method
// ShouldBeFun as parameter #2 is expected.
func (d MyInterfaceShouldBeFunMockDescriptorWith1Arg) AndAny() MyInterfaceShouldBeFunMockDescriptorWith2Args {
	return MyInterfaceShouldBeFunMockDescriptorWith2Args{d.methodDesc}
}

// AndMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method MyInterface.ShouldBeFun as parameter #2.
func (d MyInterfaceShouldBeFunMockDescriptorWith1Arg) AndMatching(match func(a1 map[string]map[examples.MyStruct]bool) error) MyInterfaceShouldBeFunMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a0 int, got_a1 map[string]map[examples.MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string {
		errMsgs := prev(got_a0, got_a1, got_a2)
		if err := match(got_a1); err != nil {
			errMsgs = append(errMsgs, "parameter \"a1\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return MyInterfaceShouldBeFunMockDescriptorWith2Args{d.methodDesc}
}

// MyInterfaceShouldBeFunMockDescriptorWith2Args is a step forward in the description of a way that the
// method MyInterface.ShouldBeFun is expected to be called, with 2
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type MyInterfaceShouldBeFunMockDescriptorWith2Args struct {
	methodDesc *MyInterfaceShouldBeFunMockDescriptor
}
	
// And lets you specify a value with which the actual value passed to
// the mocked method MyInterface.ShouldBeFun as parameter #3
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use AndAny.
//
// If you want more complex validation logic, use AndMatching.
func (d MyInterfaceShouldBeFunMockDescriptorWith2Args) And(a2 []chan<- <-chan struct{}, opts ...cmp.Option) MyInterfaceShouldBeFunMockDescriptorWith3Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a0 int, got_a1 map[string]map[examples.MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string {
		errMsgs := prev(got_a0, got_a1, got_a2)
		if diff := cmp.Diff(a2, got_a2, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #3 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return MyInterfaceShouldBeFunMockDescriptorWith3Args{d.methodDesc}
}

// AndAny declares that any value passed to the mocked method
// ShouldBeFun as parameter #3 is expected.
func (d MyInterfaceShouldBeFunMockDescriptorWith2Args) AndAny() MyInterfaceShouldBeFunMockDescriptorWith3Args {
	return MyInterfaceShouldBeFunMockDescriptorWith3Args{d.methodDesc}
}

// AndMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method MyInterface.ShouldBeFun as parameter #3.
func (d MyInterfaceShouldBeFunMockDescriptorWith2Args) AndMatching(match func(a2 []chan<- <-chan struct{}) error) MyInterfaceShouldBeFunMockDescriptorWith3Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a0 int, got_a1 map[string]map[examples.MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string {
		errMsgs := prev(got_a0, got_a1, got_a2)
		if err := match(got_a2); err != nil {
			errMsgs = append(errMsgs, "parameter \"a2\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return MyInterfaceShouldBeFunMockDescriptorWith3Args{d.methodDesc}
}

// MyInterfaceShouldBeFunMockDescriptorWith3Args is a step forward in the description of a way that the
// method MyInterface.ShouldBeFun is expected to be called, with 3
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type MyInterfaceShouldBeFunMockDescriptorWith3Args struct {
	methodDesc *MyInterfaceShouldBeFunMockDescriptor
}
	
// Returns lets you specify the values that the mocked method MyInterface.ShouldBeFun,
// if called with values matching the expectations, will return.
func (d MyInterfaceShouldBeFunMockDescriptorWith3Args) Returns(r0 int, r1 error) MyInterfaceShouldBeFunMockDescriptorWithReturn {
	return d.ReturnsFrom(func(int, map[string]map[examples.MyStruct]bool, []chan<- <-chan struct{}) (int, error) {
		return r0, r1
	})
}

// Returns lets you specify the values that the mocked method MyInterface.ShouldBeFun,
// if called with values matching the expectations, will return.
// 
// It passes such passed values to a function that then returns the return values. 
func (d MyInterfaceShouldBeFunMockDescriptorWith3Args) ReturnsFrom(f func(a0 int, a1 map[string]map[examples.MyStruct]bool, a2 []chan<- <-chan struct{}) (r0 int, r1 error)) MyInterfaceShouldBeFunMockDescriptorWithReturn {
	d.methodDesc.call = f
	return MyInterfaceShouldBeFunMockDescriptorWithReturn{d.methodDesc}
}

// MyInterfaceShouldBeFunMockDescriptorWithReturn is a step forward in the description of a way that
// method MyInterface.ShouldBeFun is to behave when called, with all expected parameters
// and the resulting values specified.
// arguments specified.
// 
// It has methods to describe the times the method is expected to be called,
// or you can start another method call description, or you can call Mock to
// end the description and get the resulting mock.
type MyInterfaceShouldBeFunMockDescriptorWithReturn struct {
	methodDesc *MyInterfaceShouldBeFunMockDescriptor
}
	
// Times lets you specify a exact number of times this method is expected to be
// called.
func (d MyInterfaceShouldBeFunMockDescriptorWithReturn) Times(times int) MyInterfaceMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d MyInterfaceShouldBeFunMockDescriptorWithReturn) AtLeastTimes(times int) MyInterfaceMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d MyInterfaceShouldBeFunMockDescriptorWithReturn) TimesMatching(f func(times int) error) MyInterfaceMockDescriptor {
	d.methodDesc.times = f
	d.methodDesc.done()
	return d.methodDesc.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See MyInterfaceMockDescriptor.Mock for details.
func (d MyInterfaceShouldBeFunMockDescriptorWithReturn) Mock() (m MyInterfaceMock, assert func(t interface{ Errorf(string, ...interface{})  }) (ok bool)) {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.Mock()
}
	
// Boring finishes the current description for method MyInterface.ShouldBeFun and
// starts describing for method Boring.
//
// See MyInterfaceMockDescriptor.Boring for details.
func (d MyInterfaceShouldBeFunMockDescriptorWithReturn) Boring() *MyInterfaceBoringMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceBoringMockDescriptor()
}
	
// EmbeddedMethod finishes the current description for method MyInterface.ShouldBeFun and
// starts describing for method EmbeddedMethod.
//
// See MyInterfaceMockDescriptor.EmbeddedMethod for details.
func (d MyInterfaceShouldBeFunMockDescriptorWithReturn) EmbeddedMethod() *MyInterfaceEmbeddedMethodMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceEmbeddedMethodMockDescriptor()
}
	
// ReturnSomethingAtLeast finishes the current description for method MyInterface.ShouldBeFun and
// starts describing for method ReturnSomethingAtLeast.
//
// See MyInterfaceMockDescriptor.ReturnSomethingAtLeast for details.
func (d MyInterfaceShouldBeFunMockDescriptorWithReturn) ReturnSomethingAtLeast() *MyInterfaceReturnSomethingAtLeastMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceReturnSomethingAtLeastMockDescriptor()
}
	
// ShouldBeFun finishes the current description for method MyInterface.ShouldBeFun and
// starts describing for method ShouldBeFun.
//
// See MyInterfaceMockDescriptor.ShouldBeFun for details.
func (d MyInterfaceShouldBeFunMockDescriptorWithReturn) ShouldBeFun() *MyInterfaceShouldBeFunMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceShouldBeFunMockDescriptor()
}
	
// StdSomething finishes the current description for method MyInterface.ShouldBeFun and
// starts describing for method StdSomething.
//
// See MyInterfaceMockDescriptor.StdSomething for details.
func (d MyInterfaceShouldBeFunMockDescriptorWithReturn) StdSomething() *MyInterfaceStdSomethingMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceStdSomethingMockDescriptor()
}
	
func (d *MyInterfaceShouldBeFunMockDescriptor) done() {
	d.mockDesc.descriptors_ShouldBeFun = append(d.mockDesc.descriptors_ShouldBeFun, d)
}
	
// StdSomething starts describing a way method MyInterface.StdSomething is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d MyInterfaceMockDescriptor) StdSomething() *MyInterfaceStdSomethingMockDescriptor {
	return d.newMyInterfaceStdSomethingMockDescriptor()
}

func (d MyInterfaceMockDescriptor) newMyInterfaceStdSomethingMockDescriptor() *MyInterfaceStdSomethingMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &MyInterfaceStdSomethingMockDescriptor{
		mockDesc: d,
		times: func(int) error { return nil },
		argValidator: func(got_f *os.File, got_ints []int) []string { return nil },
		fileLine: fmt.Sprintf("%s:%d", file, line),
	}
}

// MyInterfaceStdSomethingMockDescriptor is returned by MyInterfaceMockDescriptor.StdSomething and
// holds methods to describe the mock for method MyInterface.StdSomething.
type MyInterfaceStdSomethingMockDescriptor struct {
	mockDesc MyInterfaceMockDescriptor
	times func(int) error
	argValidator func(got_f *os.File, got_ints []int) []string
	call func(f *os.File, ints []int) (named bool)
	fileLine string
}
	
// Takes lets you specify a value with which the actual value passed to
// the mocked method MyInterface.StdSomething as parameter #1
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use TakesAny.
//
// If you want more complex validation logic, use TakesMatching.
func (d *MyInterfaceStdSomethingMockDescriptor) Takes(f *os.File, opts ...cmp.Option) MyInterfaceStdSomethingMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_f *os.File, got_ints []int) []string {
		errMsgs := prev(got_f, got_ints)
		if diff := cmp.Diff(f, got_f, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #1 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return MyInterfaceStdSomethingMockDescriptorWith1Arg{d}
}

// TakesAny declares that any value passed to the mocked method
// StdSomething as parameter #1 is expected.
func (d *MyInterfaceStdSomethingMockDescriptor) TakesAny() MyInterfaceStdSomethingMockDescriptorWith1Arg {
	return MyInterfaceStdSomethingMockDescriptorWith1Arg{d}
}

// TakesMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method MyInterface.StdSomething as parameter #1.
func (d *MyInterfaceStdSomethingMockDescriptor) TakesMatching(match func(f *os.File) error) MyInterfaceStdSomethingMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_f *os.File, got_ints []int) []string {
		errMsgs := prev(got_f, got_ints)
		if err := match(got_f); err != nil {
			errMsgs = append(errMsgs, "parameter \"f\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return MyInterfaceStdSomethingMockDescriptorWith1Arg{d}
}

// MyInterfaceStdSomethingMockDescriptorWith1Arg is a step forward in the description of a way that the
// method MyInterface.StdSomething is expected to be called, with 1
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type MyInterfaceStdSomethingMockDescriptorWith1Arg struct {
	methodDesc *MyInterfaceStdSomethingMockDescriptor
}
	
// And lets you specify a value with which the actual value passed to
// the mocked method MyInterface.StdSomething as parameter #2
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use AndAny.
//
// If you want more complex validation logic, use AndMatching.
func (d MyInterfaceStdSomethingMockDescriptorWith1Arg) And(ints []int, opts ...cmp.Option) MyInterfaceStdSomethingMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_f *os.File, got_ints []int) []string {
		errMsgs := prev(got_f, got_ints)
		if diff := cmp.Diff(ints, got_ints, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #2 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return MyInterfaceStdSomethingMockDescriptorWith2Args{d.methodDesc}
}

// AndAny declares that any value passed to the mocked method
// StdSomething as parameter #2 is expected.
func (d MyInterfaceStdSomethingMockDescriptorWith1Arg) AndAny() MyInterfaceStdSomethingMockDescriptorWith2Args {
	return MyInterfaceStdSomethingMockDescriptorWith2Args{d.methodDesc}
}

// AndMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method MyInterface.StdSomething as parameter #2.
func (d MyInterfaceStdSomethingMockDescriptorWith1Arg) AndMatching(match func(ints []int) error) MyInterfaceStdSomethingMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_f *os.File, got_ints []int) []string {
		errMsgs := prev(got_f, got_ints)
		if err := match(got_ints); err != nil {
			errMsgs = append(errMsgs, "parameter \"ints\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return MyInterfaceStdSomethingMockDescriptorWith2Args{d.methodDesc}
}

// MyInterfaceStdSomethingMockDescriptorWith2Args is a step forward in the description of a way that the
// method MyInterface.StdSomething is expected to be called, with 2
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type MyInterfaceStdSomethingMockDescriptorWith2Args struct {
	methodDesc *MyInterfaceStdSomethingMockDescriptor
}
	
// Returns lets you specify the values that the mocked method MyInterface.StdSomething,
// if called with values matching the expectations, will return.
func (d MyInterfaceStdSomethingMockDescriptorWith2Args) Returns(named bool) MyInterfaceStdSomethingMockDescriptorWithReturn {
	return d.ReturnsFrom(func(*os.File, []int) bool {
		return named
	})
}

// Returns lets you specify the values that the mocked method MyInterface.StdSomething,
// if called with values matching the expectations, will return.
// 
// It passes such passed values to a function that then returns the return values. 
func (d MyInterfaceStdSomethingMockDescriptorWith2Args) ReturnsFrom(f func(f *os.File, ints []int) (named bool)) MyInterfaceStdSomethingMockDescriptorWithReturn {
	d.methodDesc.call = f
	return MyInterfaceStdSomethingMockDescriptorWithReturn{d.methodDesc}
}

// MyInterfaceStdSomethingMockDescriptorWithReturn is a step forward in the description of a way that
// method MyInterface.StdSomething is to behave when called, with all expected parameters
// and the resulting values specified.
// arguments specified.
// 
// It has methods to describe the times the method is expected to be called,
// or you can start another method call description, or you can call Mock to
// end the description and get the resulting mock.
type MyInterfaceStdSomethingMockDescriptorWithReturn struct {
	methodDesc *MyInterfaceStdSomethingMockDescriptor
}
	
// Times lets you specify a exact number of times this method is expected to be
// called.
func (d MyInterfaceStdSomethingMockDescriptorWithReturn) Times(times int) MyInterfaceMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d MyInterfaceStdSomethingMockDescriptorWithReturn) AtLeastTimes(times int) MyInterfaceMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d MyInterfaceStdSomethingMockDescriptorWithReturn) TimesMatching(f func(times int) error) MyInterfaceMockDescriptor {
	d.methodDesc.times = f
	d.methodDesc.done()
	return d.methodDesc.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See MyInterfaceMockDescriptor.Mock for details.
func (d MyInterfaceStdSomethingMockDescriptorWithReturn) Mock() (m MyInterfaceMock, assert func(t interface{ Errorf(string, ...interface{})  }) (ok bool)) {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.Mock()
}
	
// Boring finishes the current description for method MyInterface.StdSomething and
// starts describing for method Boring.
//
// See MyInterfaceMockDescriptor.Boring for details.
func (d MyInterfaceStdSomethingMockDescriptorWithReturn) Boring() *MyInterfaceBoringMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceBoringMockDescriptor()
}
	
// EmbeddedMethod finishes the current description for method MyInterface.StdSomething and
// starts describing for method EmbeddedMethod.
//
// See MyInterfaceMockDescriptor.EmbeddedMethod for details.
func (d MyInterfaceStdSomethingMockDescriptorWithReturn) EmbeddedMethod() *MyInterfaceEmbeddedMethodMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceEmbeddedMethodMockDescriptor()
}
	
// ReturnSomethingAtLeast finishes the current description for method MyInterface.StdSomething and
// starts describing for method ReturnSomethingAtLeast.
//
// See MyInterfaceMockDescriptor.ReturnSomethingAtLeast for details.
func (d MyInterfaceStdSomethingMockDescriptorWithReturn) ReturnSomethingAtLeast() *MyInterfaceReturnSomethingAtLeastMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceReturnSomethingAtLeastMockDescriptor()
}
	
// ShouldBeFun finishes the current description for method MyInterface.StdSomething and
// starts describing for method ShouldBeFun.
//
// See MyInterfaceMockDescriptor.ShouldBeFun for details.
func (d MyInterfaceStdSomethingMockDescriptorWithReturn) ShouldBeFun() *MyInterfaceShouldBeFunMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceShouldBeFunMockDescriptor()
}
	
// StdSomething finishes the current description for method MyInterface.StdSomething and
// starts describing for method StdSomething.
//
// See MyInterfaceMockDescriptor.StdSomething for details.
func (d MyInterfaceStdSomethingMockDescriptorWithReturn) StdSomething() *MyInterfaceStdSomethingMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyInterfaceStdSomethingMockDescriptor()
}
	
func (d *MyInterfaceStdSomethingMockDescriptor) done() {
	d.mockDesc.descriptors_StdSomething = append(d.mockDesc.descriptors_StdSomething, d)
}
	
// Mock returns a mock for MyInterface that calls the functions
// defined as struct fields in the receiver.
//
// You probably want to use Describe instead.
func (m *MyInterfaceMocker) Mock() MyInterfaceMock {
	return _makegomock_MyInterfaceMockFromMocker{m}
}

type _makegomock_MyInterfaceMockFromMocker struct {
	m *MyInterfaceMocker
}

func (m _makegomock_MyInterfaceMockFromMocker) Boring() {
	m.m.Boring()
}

func (m _makegomock_MyInterfaceMockFromMocker) EmbeddedMethod() {
	m.m.EmbeddedMethod()
}

func (m _makegomock_MyInterfaceMockFromMocker) ReturnSomethingAtLeast() (r0 int) {
	return m.m.ReturnSomethingAtLeast()
}

func (m _makegomock_MyInterfaceMockFromMocker) ShouldBeFun(a0 int, a1 map[string]map[examples.MyStruct]bool, a2 ...chan<- <-chan struct{}) (r0 int, r1 error) {
	return m.m.ShouldBeFun(a0, a1, a2...)
}

func (m _makegomock_MyInterfaceMockFromMocker) StdSomething(f *os.File, ints ...int) (named bool) {
	return m.m.StdSomething(f, ints...)
}

// MyInterfaceMock is a mock with the same underlying type as MyInterface.
//
// It is copied from the original just to avoid introducing a dependency on
// MyInterface's package.
type MyInterfaceMock interface {
	Boring()
	EmbeddedMethod()
	ReturnSomethingAtLeast() (r0 int)
	ShouldBeFun(a0 int, a1 map[string]map[examples.MyStruct]bool, a2 ...chan<- <-chan struct{}) (r0 int, r1 error)
	StdSomething(f *os.File, ints ...int) (named bool)
}
