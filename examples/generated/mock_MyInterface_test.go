// Code generated by github.com/tcard/make.go.mock. DO NOT EDIT.

package generated_test

import (
	examples "github.com/tcard/make.go.mock/examples"
	os "os"
)

// MyInterfaceMocker builds mocks for type MyInterface.
//
// Its fields match the original type's methods. Set those you expect to be
// called, then call the Mock method to get a mock that implements the original
// type.
//
// If the original type was a function, it is mapped to field Func.
type MyInterfaceMocker struct {
	Boring                 func()
	EmbeddedMethod         func()
	ReturnSomethingAtLeast func() (r0 int)
	ShouldBeFun            func(a0 int, a1 map[string]map[examples.MyStruct]bool, a2 ...chan<- <-chan struct{}) (r0 int, r1 error)
	StdSomething           func(f *os.File, ints ...int) (named bool)
}

// Mock returns a mock for MyInterface that calls the functions
// defined as struct fields in the receiver.
func (m *MyInterfaceMocker) Mock() MyInterfaceMock {
	return _makegomock_MyInterfaceMockFromMocker{m}
}

type _makegomock_MyInterfaceMockFromMocker struct {
	m *MyInterfaceMocker
}

func (m _makegomock_MyInterfaceMockFromMocker) Boring() {
	m.m.Boring()
}

func (m _makegomock_MyInterfaceMockFromMocker) EmbeddedMethod() {
	m.m.EmbeddedMethod()
}

func (m _makegomock_MyInterfaceMockFromMocker) ReturnSomethingAtLeast() (r0 int) {
	return m.m.ReturnSomethingAtLeast()
}

func (m _makegomock_MyInterfaceMockFromMocker) ShouldBeFun(a0 int, a1 map[string]map[examples.MyStruct]bool, a2 ...chan<- <-chan struct{}) (r0 int, r1 error) {
	return m.m.ShouldBeFun(a0, a1, a2...)
}

func (m _makegomock_MyInterfaceMockFromMocker) StdSomething(f *os.File, ints ...int) (named bool) {
	return m.m.StdSomething(f, ints...)
}

// MyInterfaceMock is a mock with the same underlying type as MyInterface.
//
// It is copied from the original just to avoid introducing a dependency on
// MyInterface's package.
type MyInterfaceMock interface {
	Boring()
	EmbeddedMethod()
	ReturnSomethingAtLeast() (r0 int)
	ShouldBeFun(a0 int, a1 map[string]map[examples.MyStruct]bool, a2 ...chan<- <-chan struct{}) (r0 int, r1 error)
	StdSomething(f *os.File, ints ...int) (named bool)
}
