// Code generated by github.com/tcard/make.go.mock. DO NOT EDIT.

package examples

import (
	fmt "fmt"
	cmp "github.com/google/go-cmp/cmp"
	os "os"
	runtime "runtime"
)

// DifferentNameMocker builds mocks for type MyInterface.
//
// Its fields match the original type's methods. Set those you expect to be
// called, then call the Mock method to get a mock that implements the original
// type.
//
// If the original type was a function, it is mapped to field Func.
//
// The Describe method is a shortcut to define this struct's fields in a
// declarative manner.
type DifferentNameMocker struct {
	Boring                 func()
	EmbeddedMethod         func()
	ReturnSomethingAtLeast func() (r0 int)
	ShouldBeFun            func(a0 int, a1 map[string]map[MyStruct]bool, a2 ...chan<- <-chan struct{}) (r0 int, r1 error)
	StdSomething           func(f *os.File, ints ...int) (named bool)
}

// Describe lets you describe how the methods on the resulting mock are expected
// to be called and what they will return.
//
// When you're done describing methods, call Mock to get a mock that implements
// the behavior you described.
func (m *DifferentNameMocker) Describe() DifferentNameMockDescriptor {
	return DifferentNameMockDescriptor{m: m}
}

// A DifferentNameMockDescriptor lets you describe how the methods on the resulting mock are expected
// to be called and what they will return.
//
// When you're done describing methods, call its Mock method to get a mock that
// implements the behavior you described.
type DifferentNameMockDescriptor struct {
	m *DifferentNameMocker
	descriptors_Boring []*DifferentNameBoringMockDescriptor
	descriptors_EmbeddedMethod []*DifferentNameEmbeddedMethodMockDescriptor
	descriptors_ReturnSomethingAtLeast []*DifferentNameReturnSomethingAtLeastMockDescriptor
	descriptors_ShouldBeFun []*DifferentNameShouldBeFunMockDescriptor
	descriptors_StdSomething []*DifferentNameStdSomethingMockDescriptor
}

// Mock returns a mock that the MyInterface interface, following the behavior
// described by the descriptor methods.
//
// It also returns a function that should be called before the test is done to
// ensure that the expected number of calls to the mock methods happened. You
// can pass a *testing.T to it, since it implements the interface it wants.
func (d DifferentNameMockDescriptor) Mock() (m DifferentNameMock, assert func(t interface{ Errorf(s string, args ...interface{})  }) (ok bool)) {
	assert = d.done()
	return d.m.Mock(), assert
}

func (d DifferentNameMockDescriptor) done() func(t interface{ Errorf(s string, args ...interface{})  }) bool {
	var atAssert []func() (method string, errs []string)
	type specErrs struct {
		fileLine string
		errs []string
	}
	
	if len(d.descriptors_Boring) > 0 {
		for _, desc := range d.descriptors_Boring {
			desc := desc
			calls := 0
			desc.call = func() {
				calls++
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "Boring", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.Boring = func() {
			var matching []*DifferentNameBoringMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_Boring {
				errs := desc.argValidator()
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				matching[0].call()
				return
			}
			var args string
			for i, arg := range []interface{}{} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at "+errs.fileLine+":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for DifferentName.Boring with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for DifferentName.Boring with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.Boring = func() {
			panic("unexpected call to mock for DifferentName.Boring")
		}
	}
	if len(d.descriptors_EmbeddedMethod) > 0 {
		for _, desc := range d.descriptors_EmbeddedMethod {
			desc := desc
			calls := 0
			desc.call = func() {
				calls++
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "EmbeddedMethod", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.EmbeddedMethod = func() {
			var matching []*DifferentNameEmbeddedMethodMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_EmbeddedMethod {
				errs := desc.argValidator()
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				matching[0].call()
				return
			}
			var args string
			for i, arg := range []interface{}{} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at "+errs.fileLine+":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for DifferentName.EmbeddedMethod with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for DifferentName.EmbeddedMethod with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.EmbeddedMethod = func() {
			panic("unexpected call to mock for DifferentName.EmbeddedMethod")
		}
	}
	if len(d.descriptors_ReturnSomethingAtLeast) > 0 {
		for _, desc := range d.descriptors_ReturnSomethingAtLeast {
			desc := desc
			calls := 0
			prev := desc.call
			desc.call = func() (r0 int) {
				calls++
				return prev()
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "ReturnSomethingAtLeast", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.ReturnSomethingAtLeast = func() (r0 int) {
			var matching []*DifferentNameReturnSomethingAtLeastMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_ReturnSomethingAtLeast {
				errs := desc.argValidator()
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				return matching[0].call()
			}
			var args string
			for i, arg := range []interface{}{} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at "+errs.fileLine+":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for DifferentName.ReturnSomethingAtLeast with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for DifferentName.ReturnSomethingAtLeast with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.ReturnSomethingAtLeast = func() (r0 int) {
			panic("unexpected call to mock for DifferentName.ReturnSomethingAtLeast")
		}
	}
	if len(d.descriptors_ShouldBeFun) > 0 {
		for _, desc := range d.descriptors_ShouldBeFun {
			desc := desc
			calls := 0
			prev := desc.call
			desc.call = func(a0 int, a1 map[string]map[MyStruct]bool, a2 []chan<- <-chan struct{}) (r0 int, r1 error) {
				calls++
				return prev(a0, a1, a2)
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "ShouldBeFun", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.ShouldBeFun = func(a0 int, a1 map[string]map[MyStruct]bool, a2 ...chan<- <-chan struct{}) (r0 int, r1 error) {
			var matching []*DifferentNameShouldBeFunMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_ShouldBeFun {
				errs := desc.argValidator(a0, a1, a2)
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				return matching[0].call(a0, a1, a2)
			}
			var args string
			for i, arg := range []interface{}{a0, a1, a2} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at "+errs.fileLine+":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for DifferentName.ShouldBeFun with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for DifferentName.ShouldBeFun with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.ShouldBeFun = func(a0 int, a1 map[string]map[MyStruct]bool, a2 ...chan<- <-chan struct{}) (r0 int, r1 error) {
			panic("unexpected call to mock for DifferentName.ShouldBeFun")
		}
	}
	if len(d.descriptors_StdSomething) > 0 {
		for _, desc := range d.descriptors_StdSomething {
			desc := desc
			calls := 0
			prev := desc.call
			desc.call = func(f *os.File, ints []int) (named bool) {
				calls++
				return prev(f, ints)
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "StdSomething", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.StdSomething = func(f *os.File, ints ...int) (named bool) {
			var matching []*DifferentNameStdSomethingMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_StdSomething {
				errs := desc.argValidator(f, ints)
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				return matching[0].call(f, ints)
			}
			var args string
			for i, arg := range []interface{}{f, ints} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at "+errs.fileLine+":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for DifferentName.StdSomething with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for DifferentName.StdSomething with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.StdSomething = func(f *os.File, ints ...int) (named bool) {
			panic("unexpected call to mock for DifferentName.StdSomething")
		}
	}
	return func(t interface{ Errorf(s string, args ...interface{})  }) bool {
		ok := true
		for _, assert := range atAssert {
			method, errs := assert()
			for _, err := range errs {
				ok = false
				t.Errorf("mock for DifferentName.%s: %s", method, err)
			}
		}
		return ok
	}
}
	
// Boring starts describing a way method DifferentName.Boring is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d DifferentNameMockDescriptor) Boring() *DifferentNameBoringMockDescriptor {
	return d.newDifferentNameBoringMockDescriptor()
}

func (d DifferentNameMockDescriptor) newDifferentNameBoringMockDescriptor() *DifferentNameBoringMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &DifferentNameBoringMockDescriptor{
		mockDesc: d,
		times: func(int) error { return nil },
		argValidator: func() []string { return nil },
		fileLine: fmt.Sprintf("%s:%d", file, line),
	}
}

// DifferentNameBoringMockDescriptor is returned by DifferentNameMockDescriptor.Boring and
// holds methods to describe the mock for method DifferentName.Boring.
type DifferentNameBoringMockDescriptor struct {
	mockDesc DifferentNameMockDescriptor
	times func(int) error
	argValidator func() []string
	call func()
	fileLine string
}
	
// Times lets you specify a exact number of times this method is expected to be
// called.
func (d *DifferentNameBoringMockDescriptor) Times(times int) DifferentNameMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d *DifferentNameBoringMockDescriptor) AtLeastTimes(times int) DifferentNameMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d *DifferentNameBoringMockDescriptor) TimesMatching(f func(times int) error) DifferentNameMockDescriptor {
	d.times = f
	d.done()
	return d.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See DifferentNameMockDescriptor.Mock for details.
func (d *DifferentNameBoringMockDescriptor) Mock() (m DifferentNameMock, assert func(t interface{ Errorf(string, ...interface{})  }) (ok bool)) {
	d.done()
	return d.mockDesc.Mock()
}
	
// Boring finishes the current description for method DifferentName.Boring and
// starts describing for method Boring.
//
// See DifferentNameMockDescriptor.Boring for details.
func (d *DifferentNameBoringMockDescriptor) Boring() *DifferentNameBoringMockDescriptor {
	d.done()
	return d.mockDesc.newDifferentNameBoringMockDescriptor()
}
	
// EmbeddedMethod finishes the current description for method DifferentName.Boring and
// starts describing for method EmbeddedMethod.
//
// See DifferentNameMockDescriptor.EmbeddedMethod for details.
func (d *DifferentNameBoringMockDescriptor) EmbeddedMethod() *DifferentNameEmbeddedMethodMockDescriptor {
	d.done()
	return d.mockDesc.newDifferentNameEmbeddedMethodMockDescriptor()
}
	
// ReturnSomethingAtLeast finishes the current description for method DifferentName.Boring and
// starts describing for method ReturnSomethingAtLeast.
//
// See DifferentNameMockDescriptor.ReturnSomethingAtLeast for details.
func (d *DifferentNameBoringMockDescriptor) ReturnSomethingAtLeast() *DifferentNameReturnSomethingAtLeastMockDescriptor {
	d.done()
	return d.mockDesc.newDifferentNameReturnSomethingAtLeastMockDescriptor()
}
	
// ShouldBeFun finishes the current description for method DifferentName.Boring and
// starts describing for method ShouldBeFun.
//
// See DifferentNameMockDescriptor.ShouldBeFun for details.
func (d *DifferentNameBoringMockDescriptor) ShouldBeFun() *DifferentNameShouldBeFunMockDescriptor {
	d.done()
	return d.mockDesc.newDifferentNameShouldBeFunMockDescriptor()
}
	
// StdSomething finishes the current description for method DifferentName.Boring and
// starts describing for method StdSomething.
//
// See DifferentNameMockDescriptor.StdSomething for details.
func (d *DifferentNameBoringMockDescriptor) StdSomething() *DifferentNameStdSomethingMockDescriptor {
	d.done()
	return d.mockDesc.newDifferentNameStdSomethingMockDescriptor()
}
	
func (d *DifferentNameBoringMockDescriptor) done() {
	d.mockDesc.descriptors_Boring = append(d.mockDesc.descriptors_Boring, d)
}
	
// EmbeddedMethod starts describing a way method DifferentName.EmbeddedMethod is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d DifferentNameMockDescriptor) EmbeddedMethod() *DifferentNameEmbeddedMethodMockDescriptor {
	return d.newDifferentNameEmbeddedMethodMockDescriptor()
}

func (d DifferentNameMockDescriptor) newDifferentNameEmbeddedMethodMockDescriptor() *DifferentNameEmbeddedMethodMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &DifferentNameEmbeddedMethodMockDescriptor{
		mockDesc: d,
		times: func(int) error { return nil },
		argValidator: func() []string { return nil },
		fileLine: fmt.Sprintf("%s:%d", file, line),
	}
}

// DifferentNameEmbeddedMethodMockDescriptor is returned by DifferentNameMockDescriptor.EmbeddedMethod and
// holds methods to describe the mock for method DifferentName.EmbeddedMethod.
type DifferentNameEmbeddedMethodMockDescriptor struct {
	mockDesc DifferentNameMockDescriptor
	times func(int) error
	argValidator func() []string
	call func()
	fileLine string
}
	
// Times lets you specify a exact number of times this method is expected to be
// called.
func (d *DifferentNameEmbeddedMethodMockDescriptor) Times(times int) DifferentNameMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d *DifferentNameEmbeddedMethodMockDescriptor) AtLeastTimes(times int) DifferentNameMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d *DifferentNameEmbeddedMethodMockDescriptor) TimesMatching(f func(times int) error) DifferentNameMockDescriptor {
	d.times = f
	d.done()
	return d.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See DifferentNameMockDescriptor.Mock for details.
func (d *DifferentNameEmbeddedMethodMockDescriptor) Mock() (m DifferentNameMock, assert func(t interface{ Errorf(string, ...interface{})  }) (ok bool)) {
	d.done()
	return d.mockDesc.Mock()
}
	
// Boring finishes the current description for method DifferentName.EmbeddedMethod and
// starts describing for method Boring.
//
// See DifferentNameMockDescriptor.Boring for details.
func (d *DifferentNameEmbeddedMethodMockDescriptor) Boring() *DifferentNameBoringMockDescriptor {
	d.done()
	return d.mockDesc.newDifferentNameBoringMockDescriptor()
}
	
// EmbeddedMethod finishes the current description for method DifferentName.EmbeddedMethod and
// starts describing for method EmbeddedMethod.
//
// See DifferentNameMockDescriptor.EmbeddedMethod for details.
func (d *DifferentNameEmbeddedMethodMockDescriptor) EmbeddedMethod() *DifferentNameEmbeddedMethodMockDescriptor {
	d.done()
	return d.mockDesc.newDifferentNameEmbeddedMethodMockDescriptor()
}
	
// ReturnSomethingAtLeast finishes the current description for method DifferentName.EmbeddedMethod and
// starts describing for method ReturnSomethingAtLeast.
//
// See DifferentNameMockDescriptor.ReturnSomethingAtLeast for details.
func (d *DifferentNameEmbeddedMethodMockDescriptor) ReturnSomethingAtLeast() *DifferentNameReturnSomethingAtLeastMockDescriptor {
	d.done()
	return d.mockDesc.newDifferentNameReturnSomethingAtLeastMockDescriptor()
}
	
// ShouldBeFun finishes the current description for method DifferentName.EmbeddedMethod and
// starts describing for method ShouldBeFun.
//
// See DifferentNameMockDescriptor.ShouldBeFun for details.
func (d *DifferentNameEmbeddedMethodMockDescriptor) ShouldBeFun() *DifferentNameShouldBeFunMockDescriptor {
	d.done()
	return d.mockDesc.newDifferentNameShouldBeFunMockDescriptor()
}
	
// StdSomething finishes the current description for method DifferentName.EmbeddedMethod and
// starts describing for method StdSomething.
//
// See DifferentNameMockDescriptor.StdSomething for details.
func (d *DifferentNameEmbeddedMethodMockDescriptor) StdSomething() *DifferentNameStdSomethingMockDescriptor {
	d.done()
	return d.mockDesc.newDifferentNameStdSomethingMockDescriptor()
}
	
func (d *DifferentNameEmbeddedMethodMockDescriptor) done() {
	d.mockDesc.descriptors_EmbeddedMethod = append(d.mockDesc.descriptors_EmbeddedMethod, d)
}
	
// ReturnSomethingAtLeast starts describing a way method DifferentName.ReturnSomethingAtLeast is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d DifferentNameMockDescriptor) ReturnSomethingAtLeast() *DifferentNameReturnSomethingAtLeastMockDescriptor {
	return d.newDifferentNameReturnSomethingAtLeastMockDescriptor()
}

func (d DifferentNameMockDescriptor) newDifferentNameReturnSomethingAtLeastMockDescriptor() *DifferentNameReturnSomethingAtLeastMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &DifferentNameReturnSomethingAtLeastMockDescriptor{
		mockDesc: d,
		times: func(int) error { return nil },
		argValidator: func() []string { return nil },
		fileLine: fmt.Sprintf("%s:%d", file, line),
	}
}

// DifferentNameReturnSomethingAtLeastMockDescriptor is returned by DifferentNameMockDescriptor.ReturnSomethingAtLeast and
// holds methods to describe the mock for method DifferentName.ReturnSomethingAtLeast.
type DifferentNameReturnSomethingAtLeastMockDescriptor struct {
	mockDesc DifferentNameMockDescriptor
	times func(int) error
	argValidator func() []string
	call func() (r0 int)
	fileLine string
}
	
// Returns lets you specify the values that the mocked method DifferentName.ReturnSomethingAtLeast,
// if called with values matching the expectations, will return.
func (d *DifferentNameReturnSomethingAtLeastMockDescriptor) Returns(r0 int) DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn {
	return d.ReturnsFrom(func() int {
		return r0
	})
}

// Returns lets you specify the values that the mocked method DifferentName.ReturnSomethingAtLeast,
// if called with values matching the expectations, will return.
// 
// It passes such passed values to a function that then returns the return values. 
func (d *DifferentNameReturnSomethingAtLeastMockDescriptor) ReturnsFrom(f func() (r0 int)) DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn {
	d.call = f
	return DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn{d}
}

// DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn is a step forward in the description of a way that
// method DifferentName.ReturnSomethingAtLeast is to behave when called, with all expected parameters
// and the resulting values specified.
// arguments specified.
// 
// It has methods to describe the times the method is expected to be called,
// or you can start another method call description, or you can call Mock to
// end the description and get the resulting mock.
type DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn struct {
	methodDesc *DifferentNameReturnSomethingAtLeastMockDescriptor
}
	
// Times lets you specify a exact number of times this method is expected to be
// called.
func (d DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn) Times(times int) DifferentNameMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn) AtLeastTimes(times int) DifferentNameMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn) TimesMatching(f func(times int) error) DifferentNameMockDescriptor {
	d.methodDesc.times = f
	d.methodDesc.done()
	return d.methodDesc.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See DifferentNameMockDescriptor.Mock for details.
func (d DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn) Mock() (m DifferentNameMock, assert func(t interface{ Errorf(string, ...interface{})  }) (ok bool)) {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.Mock()
}
	
// Boring finishes the current description for method DifferentName.ReturnSomethingAtLeast and
// starts describing for method Boring.
//
// See DifferentNameMockDescriptor.Boring for details.
func (d DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn) Boring() *DifferentNameBoringMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameBoringMockDescriptor()
}
	
// EmbeddedMethod finishes the current description for method DifferentName.ReturnSomethingAtLeast and
// starts describing for method EmbeddedMethod.
//
// See DifferentNameMockDescriptor.EmbeddedMethod for details.
func (d DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn) EmbeddedMethod() *DifferentNameEmbeddedMethodMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameEmbeddedMethodMockDescriptor()
}
	
// ReturnSomethingAtLeast finishes the current description for method DifferentName.ReturnSomethingAtLeast and
// starts describing for method ReturnSomethingAtLeast.
//
// See DifferentNameMockDescriptor.ReturnSomethingAtLeast for details.
func (d DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn) ReturnSomethingAtLeast() *DifferentNameReturnSomethingAtLeastMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameReturnSomethingAtLeastMockDescriptor()
}
	
// ShouldBeFun finishes the current description for method DifferentName.ReturnSomethingAtLeast and
// starts describing for method ShouldBeFun.
//
// See DifferentNameMockDescriptor.ShouldBeFun for details.
func (d DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn) ShouldBeFun() *DifferentNameShouldBeFunMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameShouldBeFunMockDescriptor()
}
	
// StdSomething finishes the current description for method DifferentName.ReturnSomethingAtLeast and
// starts describing for method StdSomething.
//
// See DifferentNameMockDescriptor.StdSomething for details.
func (d DifferentNameReturnSomethingAtLeastMockDescriptorWithReturn) StdSomething() *DifferentNameStdSomethingMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameStdSomethingMockDescriptor()
}
	
func (d *DifferentNameReturnSomethingAtLeastMockDescriptor) done() {
	d.mockDesc.descriptors_ReturnSomethingAtLeast = append(d.mockDesc.descriptors_ReturnSomethingAtLeast, d)
}
	
// ShouldBeFun starts describing a way method DifferentName.ShouldBeFun is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d DifferentNameMockDescriptor) ShouldBeFun() *DifferentNameShouldBeFunMockDescriptor {
	return d.newDifferentNameShouldBeFunMockDescriptor()
}

func (d DifferentNameMockDescriptor) newDifferentNameShouldBeFunMockDescriptor() *DifferentNameShouldBeFunMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &DifferentNameShouldBeFunMockDescriptor{
		mockDesc: d,
		times: func(int) error { return nil },
		argValidator: func(got_a0 int, got_a1 map[string]map[MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string { return nil },
		fileLine: fmt.Sprintf("%s:%d", file, line),
	}
}

// DifferentNameShouldBeFunMockDescriptor is returned by DifferentNameMockDescriptor.ShouldBeFun and
// holds methods to describe the mock for method DifferentName.ShouldBeFun.
type DifferentNameShouldBeFunMockDescriptor struct {
	mockDesc DifferentNameMockDescriptor
	times func(int) error
	argValidator func(got_a0 int, got_a1 map[string]map[MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string
	call func(a0 int, a1 map[string]map[MyStruct]bool, a2 []chan<- <-chan struct{}) (r0 int, r1 error)
	fileLine string
}
	
// Takes lets you specify a value with which the actual value passed to
// the mocked method DifferentName.ShouldBeFun as parameter #1
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use TakesAny.
//
// If you want more complex validation logic, use TakesMatching.
func (d *DifferentNameShouldBeFunMockDescriptor) Takes(a0 int, opts ...cmp.Option) DifferentNameShouldBeFunMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_a0 int, got_a1 map[string]map[MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string {
		errMsgs := prev(got_a0, got_a1, got_a2)
		if diff := cmp.Diff(a0, got_a0, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #1 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return DifferentNameShouldBeFunMockDescriptorWith1Arg{d}
}

// TakesAny declares that any value passed to the mocked method
// ShouldBeFun as parameter #1 is expected.
func (d *DifferentNameShouldBeFunMockDescriptor) TakesAny() DifferentNameShouldBeFunMockDescriptorWith1Arg {
	return DifferentNameShouldBeFunMockDescriptorWith1Arg{d}
}

// TakesMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method DifferentName.ShouldBeFun as parameter #1.
func (d *DifferentNameShouldBeFunMockDescriptor) TakesMatching(match func(a0 int) error) DifferentNameShouldBeFunMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_a0 int, got_a1 map[string]map[MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string {
		errMsgs := prev(got_a0, got_a1, got_a2)
		if err := match(got_a0); err != nil {
			errMsgs = append(errMsgs, "parameter \"a0\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return DifferentNameShouldBeFunMockDescriptorWith1Arg{d}
}

// DifferentNameShouldBeFunMockDescriptorWith1Arg is a step forward in the description of a way that the
// method DifferentName.ShouldBeFun is expected to be called, with 1
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type DifferentNameShouldBeFunMockDescriptorWith1Arg struct {
	methodDesc *DifferentNameShouldBeFunMockDescriptor
}
	
// And lets you specify a value with which the actual value passed to
// the mocked method DifferentName.ShouldBeFun as parameter #2
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use AndAny.
//
// If you want more complex validation logic, use AndMatching.
func (d DifferentNameShouldBeFunMockDescriptorWith1Arg) And(a1 map[string]map[MyStruct]bool, opts ...cmp.Option) DifferentNameShouldBeFunMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a0 int, got_a1 map[string]map[MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string {
		errMsgs := prev(got_a0, got_a1, got_a2)
		if diff := cmp.Diff(a1, got_a1, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #2 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return DifferentNameShouldBeFunMockDescriptorWith2Args{d.methodDesc}
}

// AndAny declares that any value passed to the mocked method
// ShouldBeFun as parameter #2 is expected.
func (d DifferentNameShouldBeFunMockDescriptorWith1Arg) AndAny() DifferentNameShouldBeFunMockDescriptorWith2Args {
	return DifferentNameShouldBeFunMockDescriptorWith2Args{d.methodDesc}
}

// AndMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method DifferentName.ShouldBeFun as parameter #2.
func (d DifferentNameShouldBeFunMockDescriptorWith1Arg) AndMatching(match func(a1 map[string]map[MyStruct]bool) error) DifferentNameShouldBeFunMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a0 int, got_a1 map[string]map[MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string {
		errMsgs := prev(got_a0, got_a1, got_a2)
		if err := match(got_a1); err != nil {
			errMsgs = append(errMsgs, "parameter \"a1\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return DifferentNameShouldBeFunMockDescriptorWith2Args{d.methodDesc}
}

// DifferentNameShouldBeFunMockDescriptorWith2Args is a step forward in the description of a way that the
// method DifferentName.ShouldBeFun is expected to be called, with 2
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type DifferentNameShouldBeFunMockDescriptorWith2Args struct {
	methodDesc *DifferentNameShouldBeFunMockDescriptor
}
	
// And lets you specify a value with which the actual value passed to
// the mocked method DifferentName.ShouldBeFun as parameter #3
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use AndAny.
//
// If you want more complex validation logic, use AndMatching.
func (d DifferentNameShouldBeFunMockDescriptorWith2Args) And(a2 []chan<- <-chan struct{}, opts ...cmp.Option) DifferentNameShouldBeFunMockDescriptorWith3Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a0 int, got_a1 map[string]map[MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string {
		errMsgs := prev(got_a0, got_a1, got_a2)
		if diff := cmp.Diff(a2, got_a2, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #3 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return DifferentNameShouldBeFunMockDescriptorWith3Args{d.methodDesc}
}

// AndAny declares that any value passed to the mocked method
// ShouldBeFun as parameter #3 is expected.
func (d DifferentNameShouldBeFunMockDescriptorWith2Args) AndAny() DifferentNameShouldBeFunMockDescriptorWith3Args {
	return DifferentNameShouldBeFunMockDescriptorWith3Args{d.methodDesc}
}

// AndMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method DifferentName.ShouldBeFun as parameter #3.
func (d DifferentNameShouldBeFunMockDescriptorWith2Args) AndMatching(match func(a2 []chan<- <-chan struct{}) error) DifferentNameShouldBeFunMockDescriptorWith3Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a0 int, got_a1 map[string]map[MyStruct]bool, got_a2 []chan<- <-chan struct{}) []string {
		errMsgs := prev(got_a0, got_a1, got_a2)
		if err := match(got_a2); err != nil {
			errMsgs = append(errMsgs, "parameter \"a2\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return DifferentNameShouldBeFunMockDescriptorWith3Args{d.methodDesc}
}

// DifferentNameShouldBeFunMockDescriptorWith3Args is a step forward in the description of a way that the
// method DifferentName.ShouldBeFun is expected to be called, with 3
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type DifferentNameShouldBeFunMockDescriptorWith3Args struct {
	methodDesc *DifferentNameShouldBeFunMockDescriptor
}
	
// Returns lets you specify the values that the mocked method DifferentName.ShouldBeFun,
// if called with values matching the expectations, will return.
func (d DifferentNameShouldBeFunMockDescriptorWith3Args) Returns(r0 int, r1 error) DifferentNameShouldBeFunMockDescriptorWithReturn {
	return d.ReturnsFrom(func(int, map[string]map[MyStruct]bool, []chan<- <-chan struct{}) (int, error) {
		return r0, r1
	})
}

// Returns lets you specify the values that the mocked method DifferentName.ShouldBeFun,
// if called with values matching the expectations, will return.
// 
// It passes such passed values to a function that then returns the return values. 
func (d DifferentNameShouldBeFunMockDescriptorWith3Args) ReturnsFrom(f func(a0 int, a1 map[string]map[MyStruct]bool, a2 []chan<- <-chan struct{}) (r0 int, r1 error)) DifferentNameShouldBeFunMockDescriptorWithReturn {
	d.methodDesc.call = f
	return DifferentNameShouldBeFunMockDescriptorWithReturn{d.methodDesc}
}

// DifferentNameShouldBeFunMockDescriptorWithReturn is a step forward in the description of a way that
// method DifferentName.ShouldBeFun is to behave when called, with all expected parameters
// and the resulting values specified.
// arguments specified.
// 
// It has methods to describe the times the method is expected to be called,
// or you can start another method call description, or you can call Mock to
// end the description and get the resulting mock.
type DifferentNameShouldBeFunMockDescriptorWithReturn struct {
	methodDesc *DifferentNameShouldBeFunMockDescriptor
}
	
// Times lets you specify a exact number of times this method is expected to be
// called.
func (d DifferentNameShouldBeFunMockDescriptorWithReturn) Times(times int) DifferentNameMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d DifferentNameShouldBeFunMockDescriptorWithReturn) AtLeastTimes(times int) DifferentNameMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d DifferentNameShouldBeFunMockDescriptorWithReturn) TimesMatching(f func(times int) error) DifferentNameMockDescriptor {
	d.methodDesc.times = f
	d.methodDesc.done()
	return d.methodDesc.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See DifferentNameMockDescriptor.Mock for details.
func (d DifferentNameShouldBeFunMockDescriptorWithReturn) Mock() (m DifferentNameMock, assert func(t interface{ Errorf(string, ...interface{})  }) (ok bool)) {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.Mock()
}
	
// Boring finishes the current description for method DifferentName.ShouldBeFun and
// starts describing for method Boring.
//
// See DifferentNameMockDescriptor.Boring for details.
func (d DifferentNameShouldBeFunMockDescriptorWithReturn) Boring() *DifferentNameBoringMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameBoringMockDescriptor()
}
	
// EmbeddedMethod finishes the current description for method DifferentName.ShouldBeFun and
// starts describing for method EmbeddedMethod.
//
// See DifferentNameMockDescriptor.EmbeddedMethod for details.
func (d DifferentNameShouldBeFunMockDescriptorWithReturn) EmbeddedMethod() *DifferentNameEmbeddedMethodMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameEmbeddedMethodMockDescriptor()
}
	
// ReturnSomethingAtLeast finishes the current description for method DifferentName.ShouldBeFun and
// starts describing for method ReturnSomethingAtLeast.
//
// See DifferentNameMockDescriptor.ReturnSomethingAtLeast for details.
func (d DifferentNameShouldBeFunMockDescriptorWithReturn) ReturnSomethingAtLeast() *DifferentNameReturnSomethingAtLeastMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameReturnSomethingAtLeastMockDescriptor()
}
	
// ShouldBeFun finishes the current description for method DifferentName.ShouldBeFun and
// starts describing for method ShouldBeFun.
//
// See DifferentNameMockDescriptor.ShouldBeFun for details.
func (d DifferentNameShouldBeFunMockDescriptorWithReturn) ShouldBeFun() *DifferentNameShouldBeFunMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameShouldBeFunMockDescriptor()
}
	
// StdSomething finishes the current description for method DifferentName.ShouldBeFun and
// starts describing for method StdSomething.
//
// See DifferentNameMockDescriptor.StdSomething for details.
func (d DifferentNameShouldBeFunMockDescriptorWithReturn) StdSomething() *DifferentNameStdSomethingMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameStdSomethingMockDescriptor()
}
	
func (d *DifferentNameShouldBeFunMockDescriptor) done() {
	d.mockDesc.descriptors_ShouldBeFun = append(d.mockDesc.descriptors_ShouldBeFun, d)
}
	
// StdSomething starts describing a way method DifferentName.StdSomething is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d DifferentNameMockDescriptor) StdSomething() *DifferentNameStdSomethingMockDescriptor {
	return d.newDifferentNameStdSomethingMockDescriptor()
}

func (d DifferentNameMockDescriptor) newDifferentNameStdSomethingMockDescriptor() *DifferentNameStdSomethingMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &DifferentNameStdSomethingMockDescriptor{
		mockDesc: d,
		times: func(int) error { return nil },
		argValidator: func(got_f *os.File, got_ints []int) []string { return nil },
		fileLine: fmt.Sprintf("%s:%d", file, line),
	}
}

// DifferentNameStdSomethingMockDescriptor is returned by DifferentNameMockDescriptor.StdSomething and
// holds methods to describe the mock for method DifferentName.StdSomething.
type DifferentNameStdSomethingMockDescriptor struct {
	mockDesc DifferentNameMockDescriptor
	times func(int) error
	argValidator func(got_f *os.File, got_ints []int) []string
	call func(f *os.File, ints []int) (named bool)
	fileLine string
}
	
// Takes lets you specify a value with which the actual value passed to
// the mocked method DifferentName.StdSomething as parameter #1
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use TakesAny.
//
// If you want more complex validation logic, use TakesMatching.
func (d *DifferentNameStdSomethingMockDescriptor) Takes(f *os.File, opts ...cmp.Option) DifferentNameStdSomethingMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_f *os.File, got_ints []int) []string {
		errMsgs := prev(got_f, got_ints)
		if diff := cmp.Diff(f, got_f, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #1 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return DifferentNameStdSomethingMockDescriptorWith1Arg{d}
}

// TakesAny declares that any value passed to the mocked method
// StdSomething as parameter #1 is expected.
func (d *DifferentNameStdSomethingMockDescriptor) TakesAny() DifferentNameStdSomethingMockDescriptorWith1Arg {
	return DifferentNameStdSomethingMockDescriptorWith1Arg{d}
}

// TakesMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method DifferentName.StdSomething as parameter #1.
func (d *DifferentNameStdSomethingMockDescriptor) TakesMatching(match func(f *os.File) error) DifferentNameStdSomethingMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_f *os.File, got_ints []int) []string {
		errMsgs := prev(got_f, got_ints)
		if err := match(got_f); err != nil {
			errMsgs = append(errMsgs, "parameter \"f\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return DifferentNameStdSomethingMockDescriptorWith1Arg{d}
}

// DifferentNameStdSomethingMockDescriptorWith1Arg is a step forward in the description of a way that the
// method DifferentName.StdSomething is expected to be called, with 1
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type DifferentNameStdSomethingMockDescriptorWith1Arg struct {
	methodDesc *DifferentNameStdSomethingMockDescriptor
}
	
// And lets you specify a value with which the actual value passed to
// the mocked method DifferentName.StdSomething as parameter #2
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use AndAny.
//
// If you want more complex validation logic, use AndMatching.
func (d DifferentNameStdSomethingMockDescriptorWith1Arg) And(ints []int, opts ...cmp.Option) DifferentNameStdSomethingMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_f *os.File, got_ints []int) []string {
		errMsgs := prev(got_f, got_ints)
		if diff := cmp.Diff(ints, got_ints, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #2 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return DifferentNameStdSomethingMockDescriptorWith2Args{d.methodDesc}
}

// AndAny declares that any value passed to the mocked method
// StdSomething as parameter #2 is expected.
func (d DifferentNameStdSomethingMockDescriptorWith1Arg) AndAny() DifferentNameStdSomethingMockDescriptorWith2Args {
	return DifferentNameStdSomethingMockDescriptorWith2Args{d.methodDesc}
}

// AndMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method DifferentName.StdSomething as parameter #2.
func (d DifferentNameStdSomethingMockDescriptorWith1Arg) AndMatching(match func(ints []int) error) DifferentNameStdSomethingMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_f *os.File, got_ints []int) []string {
		errMsgs := prev(got_f, got_ints)
		if err := match(got_ints); err != nil {
			errMsgs = append(errMsgs, "parameter \"ints\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return DifferentNameStdSomethingMockDescriptorWith2Args{d.methodDesc}
}

// DifferentNameStdSomethingMockDescriptorWith2Args is a step forward in the description of a way that the
// method DifferentName.StdSomething is expected to be called, with 2
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type DifferentNameStdSomethingMockDescriptorWith2Args struct {
	methodDesc *DifferentNameStdSomethingMockDescriptor
}
	
// Returns lets you specify the values that the mocked method DifferentName.StdSomething,
// if called with values matching the expectations, will return.
func (d DifferentNameStdSomethingMockDescriptorWith2Args) Returns(named bool) DifferentNameStdSomethingMockDescriptorWithReturn {
	return d.ReturnsFrom(func(*os.File, []int) bool {
		return named
	})
}

// Returns lets you specify the values that the mocked method DifferentName.StdSomething,
// if called with values matching the expectations, will return.
// 
// It passes such passed values to a function that then returns the return values. 
func (d DifferentNameStdSomethingMockDescriptorWith2Args) ReturnsFrom(f func(f *os.File, ints []int) (named bool)) DifferentNameStdSomethingMockDescriptorWithReturn {
	d.methodDesc.call = f
	return DifferentNameStdSomethingMockDescriptorWithReturn{d.methodDesc}
}

// DifferentNameStdSomethingMockDescriptorWithReturn is a step forward in the description of a way that
// method DifferentName.StdSomething is to behave when called, with all expected parameters
// and the resulting values specified.
// arguments specified.
// 
// It has methods to describe the times the method is expected to be called,
// or you can start another method call description, or you can call Mock to
// end the description and get the resulting mock.
type DifferentNameStdSomethingMockDescriptorWithReturn struct {
	methodDesc *DifferentNameStdSomethingMockDescriptor
}
	
// Times lets you specify a exact number of times this method is expected to be
// called.
func (d DifferentNameStdSomethingMockDescriptorWithReturn) Times(times int) DifferentNameMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d DifferentNameStdSomethingMockDescriptorWithReturn) AtLeastTimes(times int) DifferentNameMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d DifferentNameStdSomethingMockDescriptorWithReturn) TimesMatching(f func(times int) error) DifferentNameMockDescriptor {
	d.methodDesc.times = f
	d.methodDesc.done()
	return d.methodDesc.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See DifferentNameMockDescriptor.Mock for details.
func (d DifferentNameStdSomethingMockDescriptorWithReturn) Mock() (m DifferentNameMock, assert func(t interface{ Errorf(string, ...interface{})  }) (ok bool)) {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.Mock()
}
	
// Boring finishes the current description for method DifferentName.StdSomething and
// starts describing for method Boring.
//
// See DifferentNameMockDescriptor.Boring for details.
func (d DifferentNameStdSomethingMockDescriptorWithReturn) Boring() *DifferentNameBoringMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameBoringMockDescriptor()
}
	
// EmbeddedMethod finishes the current description for method DifferentName.StdSomething and
// starts describing for method EmbeddedMethod.
//
// See DifferentNameMockDescriptor.EmbeddedMethod for details.
func (d DifferentNameStdSomethingMockDescriptorWithReturn) EmbeddedMethod() *DifferentNameEmbeddedMethodMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameEmbeddedMethodMockDescriptor()
}
	
// ReturnSomethingAtLeast finishes the current description for method DifferentName.StdSomething and
// starts describing for method ReturnSomethingAtLeast.
//
// See DifferentNameMockDescriptor.ReturnSomethingAtLeast for details.
func (d DifferentNameStdSomethingMockDescriptorWithReturn) ReturnSomethingAtLeast() *DifferentNameReturnSomethingAtLeastMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameReturnSomethingAtLeastMockDescriptor()
}
	
// ShouldBeFun finishes the current description for method DifferentName.StdSomething and
// starts describing for method ShouldBeFun.
//
// See DifferentNameMockDescriptor.ShouldBeFun for details.
func (d DifferentNameStdSomethingMockDescriptorWithReturn) ShouldBeFun() *DifferentNameShouldBeFunMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameShouldBeFunMockDescriptor()
}
	
// StdSomething finishes the current description for method DifferentName.StdSomething and
// starts describing for method StdSomething.
//
// See DifferentNameMockDescriptor.StdSomething for details.
func (d DifferentNameStdSomethingMockDescriptorWithReturn) StdSomething() *DifferentNameStdSomethingMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newDifferentNameStdSomethingMockDescriptor()
}
	
func (d *DifferentNameStdSomethingMockDescriptor) done() {
	d.mockDesc.descriptors_StdSomething = append(d.mockDesc.descriptors_StdSomething, d)
}
	
// Mock returns a mock for MyInterface that calls the functions
// defined as struct fields in the receiver.
//
// You probably want to use Describe instead.
func (m *DifferentNameMocker) Mock() DifferentNameMock {
	return _makegomock_DifferentNameMockFromMocker{m}
}

type _makegomock_DifferentNameMockFromMocker struct {
	m *DifferentNameMocker
}

func (m _makegomock_DifferentNameMockFromMocker) Boring() {
	m.m.Boring()
}

func (m _makegomock_DifferentNameMockFromMocker) EmbeddedMethod() {
	m.m.EmbeddedMethod()
}

func (m _makegomock_DifferentNameMockFromMocker) ReturnSomethingAtLeast() (r0 int) {
	return m.m.ReturnSomethingAtLeast()
}

func (m _makegomock_DifferentNameMockFromMocker) ShouldBeFun(a0 int, a1 map[string]map[MyStruct]bool, a2 ...chan<- <-chan struct{}) (r0 int, r1 error) {
	return m.m.ShouldBeFun(a0, a1, a2...)
}

func (m _makegomock_DifferentNameMockFromMocker) StdSomething(f *os.File, ints ...int) (named bool) {
	return m.m.StdSomething(f, ints...)
}

// DifferentNameMock is a mock with the same underlying type as MyInterface.
//
// It is copied from the original just to avoid introducing a dependency on
// MyInterface's package.
type DifferentNameMock interface {
	Boring()
	EmbeddedMethod()
	ReturnSomethingAtLeast() (r0 int)
	ShouldBeFun(a0 int, a1 map[string]map[MyStruct]bool, a2 ...chan<- <-chan struct{}) (r0 int, r1 error)
	StdSomething(f *os.File, ints ...int) (named bool)
}
