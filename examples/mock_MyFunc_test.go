// Code generated by github.com/tcard/make.go.mock. DO NOT EDIT.

package examples

import (
	fmt "fmt"
	cmp "github.com/google/go-cmp/cmp"
	runtime "runtime"
)

// MyFuncMocker builds mocks for type MyFunc.
//
// Its fields match the original type's methods. Set those you expect to be
// called, then call the Mock method to get a mock that implements the original
// type.
//
// If the original type was a function, it is mapped to field Func.
//
// The Describe method is a shortcut to define this struct's fields in a
// declarative manner.
type MyFuncMocker struct {
	Func func(a int, b int, c int, x bool, multi ...MyStruct) (ok bool, err error)
}

// Describe lets you describe how the methods on the resulting mock are expected
// to be called and what they will return.
//
// When you're done describing methods, call Mock to get a mock that implements
// the behavior you described.
func (m *MyFuncMocker) Describe() MyFuncMockDescriptor {
	return MyFuncMockDescriptor{m: m}
}

// A MyFuncMockDescriptor lets you describe how the methods on the resulting mock are expected
// to be called and what they will return.
//
// When you're done describing methods, call its Mock method to get a mock that
// implements the behavior you described.
type MyFuncMockDescriptor struct {
	m *MyFuncMocker
	descriptors_Func []*MyFuncFuncMockDescriptor
}

// Mock returns a mock that the MyFunc interface, following the behavior
// described by the descriptor methods.
//
// It also returns a function that should be called before the test is done to
// ensure that the expected number of calls to the mock methods happened. You
// can pass a *testing.T to it, since it implements the interface it wants.
func (d MyFuncMockDescriptor) Mock() (m MyFuncMock, assert func(t interface{ Errorf(s string, args ...interface{})  }) (ok bool)) {
	assert = d.done()
	return d.m.Mock(), assert
}

func (d MyFuncMockDescriptor) done() func(t interface{ Errorf(s string, args ...interface{})  }) bool {
	var atAssert []func() (method string, errs []string)
	type specErrs struct {
		fileLine string
		errs []string
	}
	
	if len(d.descriptors_Func) > 0 {
		for _, desc := range d.descriptors_Func {
			desc := desc
			calls := 0
			prev := desc.call
			desc.call = func(a int, b int, c int, x bool, multi []MyStruct) (ok bool, err error) {
				calls++
				return prev(a, b, c, x, multi)
			}
			atAssert = append(atAssert, func() (method string, errs []string) {
				err := desc.times(calls)
				if err != nil {
					return "Func", []string{err.Error()}
				}
				return "", nil
			})
		}
		d.m.Func = func(a int, b int, c int, x bool, multi ...MyStruct) (ok bool, err error) {
			var matching []*MyFuncFuncMockDescriptor
			var allErrs []specErrs
			for _, desc := range d.descriptors_Func {
				errs := desc.argValidator(a, b, c, x, multi)
				if len(errs) > 0 {
					allErrs = append(allErrs, specErrs{desc.fileLine, errs})
				} else {
					matching = append(matching, desc)
				}
			}
			if len(matching) == 1 {
				return matching[0].call(a, b, c, x, multi)
			}
			var args string
			for i, arg := range []interface{}{a, b, c, x, multi} {
				if i != 0 {
					args += "\n\t"
				}
				args += fmt.Sprintf("%#v", arg)
			}
			if len(matching) == 0 {
				matchingErrs := ""
				for _, errs := range allErrs {
					matchingErrs += "\n\tcandidate described at "+errs.fileLine+":\n"
					for _, err := range errs.errs {
						matchingErrs += "\n\t\t" + err
					}
				}
				panic(fmt.Errorf("no matching candidate for call to mock for MyFunc.Func with args:\n\n\t%+v\n\nfailing candidates:\n%s", args, matchingErrs))
			}
			matchingLines := ""
			for _, m := range matching {
				matchingLines += "\n\tcandidate described at " + m.fileLine
			}
			panic(fmt.Errorf("more than one candidate for call to mock for MyFunc.Func with args:\n\n\t%+v\n\nmatching candidates:\n%s", args, matchingLines))
		}
	} else {
		d.m.Func = func(a int, b int, c int, x bool, multi ...MyStruct) (ok bool, err error) {
			panic("unexpected call to mock for MyFunc.Func")
		}
	}
	return func(t interface{ Errorf(s string, args ...interface{})  }) bool {
		ok := true
		for _, assert := range atAssert {
			method, errs := assert()
			for _, err := range errs {
				ok = false
				t.Errorf("mock for MyFunc.%s: %s", method, err)
			}
		}
		return ok
	}
}
	
// Func starts describing a way method MyFunc.Func is expected to be called
// and what it should return.
//
// You can call it several times to describe different behaviors, each matching different parameters.
func (d MyFuncMockDescriptor) Func() *MyFuncFuncMockDescriptor {
	return d.newMyFuncFuncMockDescriptor()
}

func (d MyFuncMockDescriptor) newMyFuncFuncMockDescriptor() *MyFuncFuncMockDescriptor {
	_, file, line, _ := runtime.Caller(2)
	return &MyFuncFuncMockDescriptor{
		mockDesc: d,
		times: func(int) error { return nil },
		argValidator: func(got_a int, got_b int, got_c int, got_x bool, got_multi []MyStruct) []string { return nil },
		fileLine: fmt.Sprintf("%s:%d", file, line),
	}
}

// MyFuncFuncMockDescriptor is returned by MyFuncMockDescriptor.Func and
// holds methods to describe the mock for method MyFunc.Func.
type MyFuncFuncMockDescriptor struct {
	mockDesc MyFuncMockDescriptor
	times func(int) error
	argValidator func(got_a int, got_b int, got_c int, got_x bool, got_multi []MyStruct) []string
	call func(a int, b int, c int, x bool, multi []MyStruct) (ok bool, err error)
	fileLine string
}
	
// Takes lets you specify a value with which the actual value passed to
// the mocked method MyFunc.Func as parameter #1
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use TakesAny.
//
// If you want more complex validation logic, use TakesMatching.
func (d *MyFuncFuncMockDescriptor) Takes(a int, opts ...cmp.Option) MyFuncFuncMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_a int, got_b int, got_c int, got_x bool, got_multi []MyStruct) []string {
		errMsgs := prev(got_a, got_b, got_c, got_x, got_multi)
		if diff := cmp.Diff(a, got_a, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #1 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return MyFuncFuncMockDescriptorWith1Arg{d}
}

// TakesAny declares that any value passed to the mocked method
// Func as parameter #1 is expected.
func (d *MyFuncFuncMockDescriptor) TakesAny() MyFuncFuncMockDescriptorWith1Arg {
	return MyFuncFuncMockDescriptorWith1Arg{d}
}

// TakesMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method MyFunc.Func as parameter #1.
func (d *MyFuncFuncMockDescriptor) TakesMatching(match func(a int) error) MyFuncFuncMockDescriptorWith1Arg {
	prev := d.argValidator
	d.argValidator = func(got_a int, got_b int, got_c int, got_x bool, got_multi []MyStruct) []string {
		errMsgs := prev(got_a, got_b, got_c, got_x, got_multi)
		if err := match(got_a); err != nil {
			errMsgs = append(errMsgs, "parameter \"a\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return MyFuncFuncMockDescriptorWith1Arg{d}
}

// MyFuncFuncMockDescriptorWith1Arg is a step forward in the description of a way that the
// method MyFunc.Func is expected to be called, with 1
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type MyFuncFuncMockDescriptorWith1Arg struct {
	methodDesc *MyFuncFuncMockDescriptor
}
	
// And lets you specify a value with which the actual value passed to
// the mocked method MyFunc.Func as parameter #2
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use AndAny.
//
// If you want more complex validation logic, use AndMatching.
func (d MyFuncFuncMockDescriptorWith1Arg) And(b int, opts ...cmp.Option) MyFuncFuncMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a int, got_b int, got_c int, got_x bool, got_multi []MyStruct) []string {
		errMsgs := prev(got_a, got_b, got_c, got_x, got_multi)
		if diff := cmp.Diff(b, got_b, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #2 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return MyFuncFuncMockDescriptorWith2Args{d.methodDesc}
}

// AndAny declares that any value passed to the mocked method
// Func as parameter #2 is expected.
func (d MyFuncFuncMockDescriptorWith1Arg) AndAny() MyFuncFuncMockDescriptorWith2Args {
	return MyFuncFuncMockDescriptorWith2Args{d.methodDesc}
}

// AndMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method MyFunc.Func as parameter #2.
func (d MyFuncFuncMockDescriptorWith1Arg) AndMatching(match func(b int) error) MyFuncFuncMockDescriptorWith2Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a int, got_b int, got_c int, got_x bool, got_multi []MyStruct) []string {
		errMsgs := prev(got_a, got_b, got_c, got_x, got_multi)
		if err := match(got_b); err != nil {
			errMsgs = append(errMsgs, "parameter \"b\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return MyFuncFuncMockDescriptorWith2Args{d.methodDesc}
}

// MyFuncFuncMockDescriptorWith2Args is a step forward in the description of a way that the
// method MyFunc.Func is expected to be called, with 2
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type MyFuncFuncMockDescriptorWith2Args struct {
	methodDesc *MyFuncFuncMockDescriptor
}
	
// And lets you specify a value with which the actual value passed to
// the mocked method MyFunc.Func as parameter #3
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use AndAny.
//
// If you want more complex validation logic, use AndMatching.
func (d MyFuncFuncMockDescriptorWith2Args) And(c int, opts ...cmp.Option) MyFuncFuncMockDescriptorWith3Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a int, got_b int, got_c int, got_x bool, got_multi []MyStruct) []string {
		errMsgs := prev(got_a, got_b, got_c, got_x, got_multi)
		if diff := cmp.Diff(c, got_c, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #3 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return MyFuncFuncMockDescriptorWith3Args{d.methodDesc}
}

// AndAny declares that any value passed to the mocked method
// Func as parameter #3 is expected.
func (d MyFuncFuncMockDescriptorWith2Args) AndAny() MyFuncFuncMockDescriptorWith3Args {
	return MyFuncFuncMockDescriptorWith3Args{d.methodDesc}
}

// AndMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method MyFunc.Func as parameter #3.
func (d MyFuncFuncMockDescriptorWith2Args) AndMatching(match func(c int) error) MyFuncFuncMockDescriptorWith3Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a int, got_b int, got_c int, got_x bool, got_multi []MyStruct) []string {
		errMsgs := prev(got_a, got_b, got_c, got_x, got_multi)
		if err := match(got_c); err != nil {
			errMsgs = append(errMsgs, "parameter \"c\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return MyFuncFuncMockDescriptorWith3Args{d.methodDesc}
}

// MyFuncFuncMockDescriptorWith3Args is a step forward in the description of a way that the
// method MyFunc.Func is expected to be called, with 3
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type MyFuncFuncMockDescriptorWith3Args struct {
	methodDesc *MyFuncFuncMockDescriptor
}
	
// And lets you specify a value with which the actual value passed to
// the mocked method MyFunc.Func as parameter #4
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use AndAny.
//
// If you want more complex validation logic, use AndMatching.
func (d MyFuncFuncMockDescriptorWith3Args) And(x bool, opts ...cmp.Option) MyFuncFuncMockDescriptorWith4Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a int, got_b int, got_c int, got_x bool, got_multi []MyStruct) []string {
		errMsgs := prev(got_a, got_b, got_c, got_x, got_multi)
		if diff := cmp.Diff(x, got_x, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #4 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return MyFuncFuncMockDescriptorWith4Args{d.methodDesc}
}

// AndAny declares that any value passed to the mocked method
// Func as parameter #4 is expected.
func (d MyFuncFuncMockDescriptorWith3Args) AndAny() MyFuncFuncMockDescriptorWith4Args {
	return MyFuncFuncMockDescriptorWith4Args{d.methodDesc}
}

// AndMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method MyFunc.Func as parameter #4.
func (d MyFuncFuncMockDescriptorWith3Args) AndMatching(match func(x bool) error) MyFuncFuncMockDescriptorWith4Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a int, got_b int, got_c int, got_x bool, got_multi []MyStruct) []string {
		errMsgs := prev(got_a, got_b, got_c, got_x, got_multi)
		if err := match(got_x); err != nil {
			errMsgs = append(errMsgs, "parameter \"x\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return MyFuncFuncMockDescriptorWith4Args{d.methodDesc}
}

// MyFuncFuncMockDescriptorWith4Args is a step forward in the description of a way that the
// method MyFunc.Func is expected to be called, with 4
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type MyFuncFuncMockDescriptorWith4Args struct {
	methodDesc *MyFuncFuncMockDescriptor
}
	
// And lets you specify a value with which the actual value passed to
// the mocked method MyFunc.Func as parameter #5
// will be compared. 
//
// Package "github.com/google/go-cmp/cmp" is used to do the comparison. You can
// pass extra options for it.
//
// If you want to accept any value, use AndAny.
//
// If you want more complex validation logic, use AndMatching.
func (d MyFuncFuncMockDescriptorWith4Args) And(multi []MyStruct, opts ...cmp.Option) MyFuncFuncMockDescriptorWith5Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a int, got_b int, got_c int, got_x bool, got_multi []MyStruct) []string {
		errMsgs := prev(got_a, got_b, got_c, got_x, got_multi)
		if diff := cmp.Diff(multi, got_multi, opts...); diff != "" {
			errMsgs = append(errMsgs, "parameter #5 mismatch:\n" + diff)
		}
		return errMsgs
	}
	return MyFuncFuncMockDescriptorWith5Args{d.methodDesc}
}

// AndAny declares that any value passed to the mocked method
// Func as parameter #5 is expected.
func (d MyFuncFuncMockDescriptorWith4Args) AndAny() MyFuncFuncMockDescriptorWith5Args {
	return MyFuncFuncMockDescriptorWith5Args{d.methodDesc}
}

// AndMatching lets you pass a function to accept or reject the actual
// value passed to the mocked method MyFunc.Func as parameter #5.
func (d MyFuncFuncMockDescriptorWith4Args) AndMatching(match func(multi []MyStruct) error) MyFuncFuncMockDescriptorWith5Args {
	prev := d.methodDesc.argValidator
	d.methodDesc.argValidator = func(got_a int, got_b int, got_c int, got_x bool, got_multi []MyStruct) []string {
		errMsgs := prev(got_a, got_b, got_c, got_x, got_multi)
		if err := match(got_multi); err != nil {
			errMsgs = append(errMsgs, "parameter \"multi\" custom matcher error: " + err.Error())
		}
		return errMsgs
	}
	return MyFuncFuncMockDescriptorWith5Args{d.methodDesc}
}

// MyFuncFuncMockDescriptorWith5Args is a step forward in the description of a way that the
// method MyFunc.Func is expected to be called, with 5
// arguments specified.
//
// It has methods to describe the next argument, if there's
// any left, or the return values, if there are any, or the times it's expected
// to be called otherwise.
type MyFuncFuncMockDescriptorWith5Args struct {
	methodDesc *MyFuncFuncMockDescriptor
}
	
// Returns lets you specify the values that the mocked method MyFunc.Func,
// if called with values matching the expectations, will return.
func (d MyFuncFuncMockDescriptorWith5Args) Returns(ok bool, err error) MyFuncFuncMockDescriptorWithReturn {
	return d.ReturnsFrom(func(int, int, int, bool, []MyStruct) (bool, error) {
		return ok, err
	})
}

// Returns lets you specify the values that the mocked method MyFunc.Func,
// if called with values matching the expectations, will return.
// 
// It passes such passed values to a function that then returns the return values. 
func (d MyFuncFuncMockDescriptorWith5Args) ReturnsFrom(f func(a int, b int, c int, x bool, multi []MyStruct) (ok bool, err error)) MyFuncFuncMockDescriptorWithReturn {
	d.methodDesc.call = f
	return MyFuncFuncMockDescriptorWithReturn{d.methodDesc}
}

// MyFuncFuncMockDescriptorWithReturn is a step forward in the description of a way that
// method MyFunc.Func is to behave when called, with all expected parameters
// and the resulting values specified.
// arguments specified.
// 
// It has methods to describe the times the method is expected to be called,
// or you can start another method call description, or you can call Mock to
// end the description and get the resulting mock.
type MyFuncFuncMockDescriptorWithReturn struct {
	methodDesc *MyFuncFuncMockDescriptor
}
	
// Times lets you specify a exact number of times this method is expected to be
// called.
func (d MyFuncFuncMockDescriptorWithReturn) Times(times int) MyFuncMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got != times {
			return fmt.Errorf("expected exactly %d calls, got %d", times, got)
		}
		return nil
	})
}

// AtLeastTimes lets you specify a minimum number of times this method is expected to be
// called.
func (d MyFuncFuncMockDescriptorWithReturn) AtLeastTimes(times int) MyFuncMockDescriptor {
	return d.TimesMatching(func(got int) error {
		if got < times {
			return fmt.Errorf("expected at least %d calls, got %d", times, got)
		}
		return nil
	})
}

// TimesMatching lets you pass a function to accept or reject the number of times
// this method has been called.
func (d MyFuncFuncMockDescriptorWithReturn) TimesMatching(f func(times int) error) MyFuncMockDescriptor {
	d.methodDesc.times = f
	d.methodDesc.done()
	return d.methodDesc.mockDesc
}

// Mock finishes the description and produces a mock.
//
// See MyFuncMockDescriptor.Mock for details.
func (d MyFuncFuncMockDescriptorWithReturn) Mock() (m MyFuncMock, assert func(t interface{ Errorf(string, ...interface{})  }) (ok bool)) {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.Mock()
}
	
// Func finishes the current description for method MyFunc.Func and
// starts describing for method Func.
//
// See MyFuncMockDescriptor.Func for details.
func (d MyFuncFuncMockDescriptorWithReturn) Func() *MyFuncFuncMockDescriptor {
	d.methodDesc.done()
	return d.methodDesc.mockDesc.newMyFuncFuncMockDescriptor()
}
	
func (d *MyFuncFuncMockDescriptor) done() {
	d.mockDesc.descriptors_Func = append(d.mockDesc.descriptors_Func, d)
}
	
// Mock returns a mock for MyFunc that calls the functions
// defined as struct fields in the receiver.
//
// You probably want to use Describe instead.
func (m *MyFuncMocker) Mock() MyFuncMock {
	return m.Func
}

// MyFuncMock is a mock with the same underlying type as MyFunc.
//
// It is copied from the original just to avoid introducing a dependency on
// MyFunc's package.
type MyFuncMock func(a int, b int, c int, x bool, multi ...MyStruct) (ok bool, err error)
